{"version":3,"sources":["common/utilities/FieldRendererHelper.ts"],"names":[],"mappings":"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","file":"common/utilities/FieldRendererHelper.js","sourcesContent":["import * as React from 'react';\r\nimport { ISPFieldLookupValue, ITerm, IPrincipal } from '../SPEntities';\r\nimport { FieldTextRenderer } from '../../controls/fields/fieldTextRenderer/FieldTextRenderer';\r\nimport { FieldDateRenderer } from '../../controls/fields/fieldDateRenderer/FieldDateRenderer';\r\nimport { ListItemAccessor } from '@microsoft/sp-listview-extensibility';\r\nimport { SPHelper } from './SPHelper';\r\nimport { FieldTitleRenderer } from '../../controls/fields/fieldTitleRenderer/FieldTitleRenderer';\r\nimport { SPField } from '@microsoft/sp-page-context';\r\nimport { IContext } from '../Interfaces';\r\nimport { GeneralHelper } from './GeneralHelper';\r\nimport { FieldLookupRenderer, IFieldLookupClickEventArgs } from '../../controls/fields/fieldLookupRenderer/FieldLookupRenderer';\r\nimport { FieldUrlRenderer } from '../../controls/fields/fieldUrlRenderer/FieldUrlRenderer';\r\nimport { FieldTaxonomyRenderer } from '../../controls/fields/fieldTaxonomyRenderer/FieldTaxonomyRenderer';\r\nimport { IFieldRendererProps } from '../../controls/fields/fieldCommon/IFieldRendererProps';\r\nimport { FieldUserRenderer } from '../../controls/fields/fieldUserRenderer/FieldUserRenderer';\r\nimport { FieldFileTypeRenderer } from '../../controls/fields/fieldFileTypeRenderer/FieldFileTypeRenderer';\r\nimport { FieldAttachmentsRenderer } from '../../controls/fields/fieldAttachmentsRenderer/FieldAttachmentsRenderer';\r\nimport { FieldNameRenderer } from '../../controls/fields/fieldNameRenderer/FieldNameRenderer';\r\n\r\n/**\r\n * Field Renderer Helper.\r\n * Helps to render fields similarly to OOTB SharePoint rendering\r\n */\r\nexport class FieldRendererHelper {\r\n    /**\r\n     * Returns JSX.Element with OOTB rendering and applied additional props\r\n     * @param fieldValue Value of the field\r\n     * @param props IFieldRendererProps (CSS classes and CSS styles)\r\n     * @param listItem Current list item\r\n     * @param context Customizer context\r\n     */\r\n    public static getFieldRenderer(fieldValue: any, props: IFieldRendererProps, listItem: ListItemAccessor, context: IContext): Promise<JSX.Element> {\r\n        return new Promise<JSX.Element>(resolve => {\r\n            const field: SPField = context.field;\r\n            const listId: string = context.pageContext.list.id.toString();\r\n            const fieldType: string = field.fieldType;\r\n            const fieldName: string = field.internalName; //SPHelper.getFieldNameById(field.id.toString());\r\n            let result: JSX.Element = null;\r\n            const fieldValueAsEncodedText: string = fieldValue ? GeneralHelper.encodeText(fieldValue.toString()) : '';\r\n\r\n            switch (fieldType) {\r\n                case 'Text':\r\n                case 'Choice':\r\n                case 'Boolean':\r\n                case 'MultiChoice':\r\n                case 'Computed':\r\n                    const fieldStoredName: string = SPHelper.getStoredFieldName(fieldName);\r\n                    if (fieldStoredName === 'Title') {\r\n                        resolve(React.createElement(FieldTitleRenderer, {\r\n                            text: fieldValueAsEncodedText,\r\n                            isLink: fieldName === 'LinkTitle' || fieldName === 'LinkTitleNoMenu',\r\n                            listId: listId,\r\n                            id: listItem.getValueByName('ID'),\r\n                            baseUrl: context.pageContext.web.absoluteUrl,\r\n                            ...props\r\n                        }));\r\n                    }\r\n                    else if (fieldStoredName === 'DocIcon') {\r\n                        const path: string = listItem.getValueByName('FileLeafRef');\r\n                        resolve(React.createElement(FieldFileTypeRenderer, {\r\n                            path: path,\r\n                            isFolder: SPHelper.getRowItemValueByName(listItem, 'FSObjType') === '1',\r\n                            ...props\r\n                        }));\r\n                    }\r\n                    else if (fieldStoredName === 'FileLeafRef') {\r\n                        resolve(React.createElement(FieldNameRenderer, {\r\n                            text: fieldValueAsEncodedText,\r\n                            isLink: true,\r\n                            filePath: SPHelper.getRowItemValueByName(listItem, 'FileRef'),\r\n                            isNew: SPHelper.getRowItemValueByName(listItem, 'Created_x0020_Date.ifnew') === '1',\r\n                            hasPreview: true,\r\n                            ...props\r\n                        }));\r\n                    }\r\n                    else if (fieldStoredName === 'URL') {\r\n                        resolve(React.createElement(FieldUrlRenderer, {\r\n                            isImageUrl: false,\r\n                            url: fieldValue.toString(),\r\n                            text: SPHelper.getRowItemValueByName(listItem, `URL.desc`) || fieldValueAsEncodedText,\r\n                            ...props\r\n                        }));\r\n                    }\r\n                    else {\r\n                        resolve(React.createElement(FieldTextRenderer, {\r\n                            text: fieldValueAsEncodedText,\r\n                            isSafeForInnerHTML: false,\r\n                            isTruncated: false,\r\n                            ...props\r\n                        }));\r\n                    }\r\n                    break;\r\n                case 'Integer':\r\n                case 'Counter':\r\n                case 'Number':\r\n                case 'Currency':\r\n                    resolve(React.createElement(FieldTextRenderer, {\r\n                        text: fieldValueAsEncodedText,\r\n                        isSafeForInnerHTML: true,\r\n                        isTruncated: false,\r\n                        ...props\r\n                    }));\r\n                    break;\r\n                case 'Note':\r\n                    SPHelper.getFieldProperty(field.id.toString(), \"RichText\", context, false).then(richText => {\r\n                        const isRichText: boolean = richText === true || richText === 'TRUE';\r\n                        let html: string = '';\r\n\r\n                        if (isRichText) {\r\n                            html = fieldValue.toString();\r\n                        }\r\n                        else {\r\n                            html = fieldValueAsEncodedText.replace(/\\n/g, \"<br>\");\r\n                        }\r\n                        // text is truncated if its length is more that 255 symbols or it has more than 4 lines\r\n                        let isTruncated: boolean = html.length > 255 || html.split(/\\r|\\r\\n|\\n|<br>/).length > 4;\r\n                        resolve(React.createElement(FieldTextRenderer, {\r\n                            text: html,\r\n                            isSafeForInnerHTML: true,\r\n                            isTruncated: isTruncated,\r\n                            ...props\r\n                        }));\r\n                    });\r\n                    break;\r\n                case 'DateTime':\r\n                    const friendlyDisplay: string = SPHelper.getRowItemValueByName(listItem, `${fieldName}.FriendlyDisplay`);\r\n                    resolve(React.createElement(FieldDateRenderer, {\r\n                        text: friendlyDisplay ? GeneralHelper.getRelativeDateTimeString(friendlyDisplay) : fieldValueAsEncodedText,\r\n                        ...props\r\n                    }));\r\n                    break;\r\n                case \"Lookup\":\r\n                case \"LookupMulti\":\r\n                    //\r\n                    // we're providing fieldId and context. In that case Lookup values will be rendered right away\r\n                    // without additional lag of waiting of response to get dispUrl.\r\n                    // The request for DispUrl will be sent only if user click on the value\r\n                    //\r\n                    const lookupValues = fieldValue as ISPFieldLookupValue[];\r\n                    resolve(React.createElement(FieldLookupRenderer, {\r\n                        lookups: lookupValues,\r\n                        fieldId: field.id.toString(),\r\n                        context: context,\r\n                        ...props\r\n                    }));\r\n                    break;\r\n                case 'URL':\r\n                    SPHelper.getFieldProperty(field.id.toString(), 'Format', context, true).then(format => {\r\n                        const isImage: boolean = format === 'Image';\r\n                        const text: string = SPHelper.getRowItemValueByName(listItem, `${fieldName}.desc`);\r\n                        resolve(React.createElement(FieldUrlRenderer, {\r\n                            isImageUrl: isImage,\r\n                            url: fieldValue.toString(),\r\n                            text: text,\r\n                            ...props\r\n                        }));\r\n                    });\r\n                    break;\r\n                case 'Taxonomy':\r\n                case 'TaxonomyFieldType':\r\n                case 'TaxonomyFieldTypeMulti':\r\n                    const terms: ITerm[] = Array.isArray(fieldValue) ? <ITerm[]>fieldValue : <ITerm[]>[fieldValue];\r\n                    resolve(React.createElement(FieldTaxonomyRenderer, {\r\n                        terms: terms,\r\n                        ...props\r\n                    }));\r\n                    break;\r\n                case 'User':\r\n                case 'UserMulti':\r\n                    resolve(React.createElement(FieldUserRenderer, {\r\n                        users: <IPrincipal[]>fieldValue,\r\n                        context: context,\r\n                        ...props\r\n                    }));\r\n                    break;\r\n                case 'Attachments':\r\n                    resolve(React.createElement(FieldAttachmentsRenderer, {\r\n                        count: parseInt(fieldValue),\r\n                        ...props\r\n                    }));\r\n                    break;\r\n                default:\r\n                    resolve(React.createElement(FieldTextRenderer, {\r\n                        text: fieldValueAsEncodedText,\r\n                        isSafeForInnerHTML: false,\r\n                        isTruncated: false,\r\n                        ...props\r\n                    }));\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}