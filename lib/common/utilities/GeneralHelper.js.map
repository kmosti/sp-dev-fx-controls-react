{"version":3,"sources":["common/utilities/GeneralHelper.ts"],"names":[],"mappings":"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","file":"common/utilities/GeneralHelper.js","sourcesContent":["import { IContext } from '../Interfaces';\r\nimport { SPHelper } from './SPHelper';\r\nimport '../extensions/String.extensions';\r\n\r\nimport * as _ from '@microsoft/sp-lodash-subset';\r\n\r\nimport * as strings from 'ControlStrings';\r\n\r\nexport const IMG_SUPPORTED_EXTENSIONS = \".gif,.jpg,.jpeg,.bmp,.dib,.tif,.tiff,.ico,.png,.jxr,.svg\";\r\n\r\n/**\r\n * Helper with general methods to simplify some routines\r\n */\r\nexport class GeneralHelper {\r\n    /**\r\n     * Trims slash at the end of URL if needed\r\n     * @param url URL\r\n     */\r\n    public static trimSlash(url: string): string {\r\n        if (url.lastIndexOf('/') === url.length - 1)\r\n            return url.slice(0, -1);\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Encodes text\r\n     * @param text text to encode\r\n     */\r\n    public static encodeText(text: string): string {\r\n        const n = /[<>&'\"\\\\]/g;\r\n        return text ? text.replace(n, this._getEncodedChar) : '';\r\n    }\r\n\r\n    /**\r\n     * Copy of Microsoft's GetRelativeDateTimeString from SP.dateTimeUtil\r\n     */\r\n    public static getRelativeDateTimeString(format: string): string {\r\n        const formatParts: string[] = format.split('|');\r\n        let result: string = null;\r\n        let placeholdersString: string = null;\r\n\r\n        if (formatParts[0] == '0')\r\n            return format.substring(2);\r\n        const isFuture: boolean = formatParts[1] === '1';\r\n        const formatType: string = formatParts[2];\r\n        const timeString: string = formatParts.length >= 4 ? formatParts[3] : null;\r\n        const dayString: string = formatParts.length >= 5 ? formatParts[4] : null;\r\n\r\n        switch (formatType) {\r\n            case '1':\r\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AFewSecondsFuture'] : strings.DateTime['L_RelativeDateTime_AFewSeconds'];\r\n                break;\r\n            case '2':\r\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AboutAMinuteFuture'] : strings.DateTime['L_RelativeDateTime_AboutAMinute'];\r\n                break;\r\n            case '3':\r\n                placeholdersString = this.getLocalizedCountValue(isFuture ? strings.DateTime['L_RelativeDateTime_XMinutesFuture'] : strings.DateTime['L_RelativeDateTime_XMinutes'], isFuture ? strings.DateTime['L_RelativeDateTime_XMinutesFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XMinutesIntervals'], Number(timeString));\r\n                break;\r\n            case '4':\r\n                result = isFuture ? strings.DateTime['L_RelativeDateTime_AboutAnHourFuture'] : strings.DateTime['L_RelativeDateTime_AboutAnHour'];\r\n                break;\r\n            case '5':\r\n                if (timeString == null) {\r\n                    result = isFuture ? strings.DateTime['L_RelativeDateTime_Tomorrow'] : strings.DateTime['L_RelativeDateTime_Yesterday'];\r\n                }\r\n                else {\r\n                    placeholdersString = isFuture ? strings.DateTime['L_RelativeDateTime_TomorrowAndTime'] : strings.DateTime['L_RelativeDateTime_YesterdayAndTime'];\r\n                }\r\n                break;\r\n            case '6':\r\n                placeholdersString = this.getLocalizedCountValue(\r\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XHoursFuture'] : strings.DateTime['L_RelativeDateTime_XHours'],\r\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XHoursFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XHoursIntervals'],\r\n                    Number(timeString));\r\n                break;\r\n            case '7':\r\n                if (dayString == null) {\r\n                    result = timeString;\r\n                }\r\n                else {\r\n                    placeholdersString = strings.DateTime['L_RelativeDateTime_DayAndTime'];\r\n                }\r\n                break;\r\n            case '8':\r\n                placeholdersString = this.getLocalizedCountValue(\r\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XDaysFuture'] : strings.DateTime['L_RelativeDateTime_XDays'],\r\n                    isFuture ? strings.DateTime['L_RelativeDateTime_XDaysFutureIntervals'] : strings.DateTime['L_RelativeDateTime_XDaysIntervals'],\r\n                    Number(timeString));\r\n                break;\r\n            case '9':\r\n                result = strings.DateTime['L_RelativeDateTime_Today'];\r\n        }\r\n        if (placeholdersString != null) {\r\n            result = placeholdersString.replace(\"{0}\", timeString);\r\n            if (dayString != null) {\r\n                result = result.replace(\"{1}\", dayString);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy of Microsoft's GetLocalizedCountValue from SP.dateTimeUtil.\r\n     * I've tried to rename all the vars to have meaningful names... but some were too unclear\r\n     */\r\n    public static getLocalizedCountValue(format: string, first: string, second: number): string {\r\n        if (format == undefined || first == undefined || second == undefined)\r\n            return null;\r\n        let result: string = '';\r\n        let a = -1;\r\n        let firstOperandOptions: string[] = first.split('||');\r\n\r\n        for (let firstOperandOptionsIdx = 0, firstOperandOptionsLen = firstOperandOptions.length; firstOperandOptionsIdx < firstOperandOptionsLen; firstOperandOptionsIdx++) {\r\n            const firstOperandOption: string = firstOperandOptions[firstOperandOptionsIdx];\r\n\r\n            if (firstOperandOption == null || firstOperandOption === '')\r\n                continue;\r\n            let optionParts: string[] = firstOperandOption.split(',');\r\n\r\n            for (var optionPartsIdx = 0, optionPartsLen = optionParts.length; optionPartsIdx < optionPartsLen; optionPartsIdx++) {\r\n                const optionPart: string = optionParts[optionPartsIdx];\r\n\r\n                if (optionPart == null || optionPart === '')\r\n                    continue;\r\n                if (isNaN(optionPart.parseNumberInvariant())) {\r\n                    const dashParts: string[] = optionPart.split('-');\r\n\r\n                    if (dashParts == null || dashParts.length !== 2)\r\n                        continue;\r\n                    var j, n;\r\n\r\n                    if (dashParts[0] === '')\r\n                        j = 0;\r\n                    else if (isNaN(dashParts[0].parseNumberInvariant()))\r\n                        continue;\r\n                    else\r\n                        j = parseInt(dashParts[0]);\r\n                    if (second >= j) {\r\n                        if (dashParts[1] === '') {\r\n                            a = firstOperandOptionsIdx;\r\n                            break;\r\n                        }\r\n                        else if (isNaN(dashParts[1].parseNumberInvariant()))\r\n                            continue;\r\n                        else\r\n                            n = parseInt(dashParts[1]);\r\n                        if (second <= n) {\r\n                            a = firstOperandOptionsIdx;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    var p = parseInt(optionPart);\r\n\r\n                    if (second === p) {\r\n                        a = firstOperandOptionsIdx;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (a !== -1)\r\n                break;\r\n        }\r\n        if (a !== -1) {\r\n            var e = format.split('||');\r\n\r\n            if (e != null && e[a] != null && e[a] != '')\r\n                result = e[a];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts text from HTML strings without creating HTML elements\r\n     * @param html HTML string\r\n     */\r\n    public static getTextFromHTML(html: string): string {\r\n        let result: string = html;\r\n        let oldResult: string = result;\r\n        const tagBody = '(?:[^\"\\'>]|\"[^\"]*\"|\\'[^\\']*\\')*';\r\n\r\n        const tagOrComment = new RegExp(\r\n            '<(?:'\r\n            // Comment body.\r\n            + '!--(?:(?:-*[^->])*--+|-?)'\r\n            // Special \"raw text\" elements whose content should be elided.\r\n            + '|script\\\\b' + tagBody + '>[\\\\s\\\\S]*?</script\\\\s*'\r\n            + '|style\\\\b' + tagBody + '>[\\\\s\\\\S]*?</style\\\\s*'\r\n            // Regular name\r\n            + '|/?[a-z]'\r\n            + tagBody\r\n            + ')>',\r\n            'gi');\r\n\r\n        do {\r\n            oldResult = result;\r\n            result = result.replace(tagOrComment, '');\r\n        } while (result !== result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Checks if value is defined (not null and not undefined)\r\n     * @param value value\r\n     */\r\n    public static isDefined(value): boolean {\r\n        return value != null;\r\n    }\r\n\r\n    /**\r\n     * Creates Document element based on Xml string\r\n     * @param xmlString XML string to parse\r\n     */\r\n    public static parseXml(xmlString): Document {\r\n        const parser = new DOMParser();\r\n        const xml = parser.parseFromString(xmlString, 'text/xml');\r\n        return xml;\r\n    }\r\n\r\n    /**\r\n     * Returns absoulute domain URL.\r\n     * @param url\r\n     */\r\n    public static getAbsoluteDomainUrl(url: string): string  {\r\n      if (url !== undefined) {\r\n        const myURL = new URL(url.toLowerCase());\r\n        return myURL.protocol + \"//\" + myURL.host;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    public static formatBytes(bytes, decimals) {\r\n      if (bytes == 0) {\r\n        return strings.EmptyFileSize;\r\n      }\r\n\r\n      const k: number = 1024;\r\n      const dm = decimals <= 0 ? 0 : decimals || 2;\r\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + strings.SizeUnit[i];\r\n    }\r\n\r\n    /**\r\n     * Returns file name without extension.\r\n     */\r\n    public static getFileNameWithoutExtension(itemUrl : string) {\r\n      const fileNameWithExtension = GeneralHelper.getFileNameFromUrl(itemUrl);\r\n      const fileNameTokens = fileNameWithExtension.split(\".\");\r\n      const fileName = fileNameTokens[0];\r\n\r\n      return fileName;\r\n    }\r\n\r\n    /**\r\n     * Returns file name with the extension\r\n     */\r\n    public static getFileNameFromUrl(itemUrl : string) {\r\n      const urlTokens = itemUrl.split(\"?\");\r\n      const url = urlTokens[0];\r\n      const tokens = url.split(\"/\");\r\n      const fileNameWithExtension = tokens[tokens.length - 1];\r\n\r\n      return fileNameWithExtension;\r\n    }\r\n\r\n    public static isImage(fileName: string): boolean {\r\n      const acceptableExtensions: string[] = IMG_SUPPORTED_EXTENSIONS.split(\",\");\r\n      // const IMG_SUPPORTED_EXTENSIONS = \".gif,.jpg,.jpeg,.bmp,.dib,.tif,.tiff,.ico,.png,.jxr,.svg\"\r\n\r\n      const thisExtension: string = GeneralHelper.getFileExtension(fileName);\r\n      return acceptableExtensions.indexOf(thisExtension) > -1;\r\n    }\r\n\r\n    /**\r\n     * Returns extension of the file\r\n     */\r\n    public static getFileExtension(fileName): string {\r\n\r\n      // Split the URL on the dots\r\n      const splitFileName = fileName.toLowerCase().split('.');\r\n\r\n      // Take the last value\r\n      let extensionValue = splitFileName.pop();\r\n\r\n      // Check if there are query string params in place\r\n      if (extensionValue.indexOf('?') !== -1) {\r\n        // Split the string on the question mark and return the first part\r\n        const querySplit = extensionValue.split('?');\r\n        extensionValue = querySplit[0];\r\n      }\r\n\r\n      return `.${extensionValue}`;\r\n    }\r\n\r\n    private static _getEncodedChar(c): string {\r\n        const o = {\r\n            \"<\": \"&lt;\",\r\n            \">\": \"&gt;\",\r\n            \"&\": \"&amp;\",\r\n            '\"': \"&quot;\",\r\n            \"'\": \"&#39;\",\r\n            \"\\\\\": \"&#92;\"\r\n        };\r\n        return o[c];\r\n    }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}