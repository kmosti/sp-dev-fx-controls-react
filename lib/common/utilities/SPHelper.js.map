{"version":3,"sources":["common/utilities/SPHelper.ts"],"names":[],"mappings":"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","file":"common/utilities/SPHelper.js","sourcesContent":["import { IContext, IFields } from '../Interfaces';\r\nimport { GeneralHelper } from './GeneralHelper';\r\nimport { ISPField, ISPFieldLookupValue, IPrincipal, ITerm } from '../SPEntities';\r\nimport * as Constants from '../Constants';\r\nimport { ListItemAccessor } from '@microsoft/sp-listview-extensibility';\r\nimport { SPField } from '@microsoft/sp-page-context';\r\nimport { sp } from '@pnp/sp';\r\nimport { SPHttpClient } from '@microsoft/sp-http';\r\n\r\ndeclare var window: any;\r\n\r\n/**\r\n * Helper class to work with SharePoint objects and entities\r\n */\r\nexport class SPHelper {\r\n\r\n    /**\r\n     * Gets field's Real Name from FieldNamesMapping\r\n     * @param columnName current field name\r\n     */\r\n    public static getStoredFieldName(columnName: string): string {\r\n        if (!columnName)\r\n            return '';\r\n\r\n        return Constants.FieldNamesMapping[columnName] ? Constants.FieldNamesMapping[columnName].storedName : columnName;\r\n    }\r\n\r\n    /**\r\n     * Gets Field's text\r\n     * @param fieldValue field value as it appears in Field Customizer's onRenderCell event\r\n     * @param listItem List Item accessor\r\n     * @param context Customizer's context\r\n     */\r\n    public static getFieldText(fieldValue: any, listItem: ListItemAccessor, context: IContext): Promise<string> {\r\n        return new Promise<string>(resolve => {\r\n            const field: SPField = context.field;\r\n\r\n            if (!field) {\r\n                resolve('');\r\n                return;\r\n            }\r\n\r\n            const fieldName: string = field.internalName; //this.getFieldNameById(field.id.toString());\r\n            const fieldType: string = field.fieldType;\r\n            const strFieldValue: string = fieldValue ? fieldValue.toString() : '';\r\n\r\n            switch (fieldType) {\r\n                case 'Note':\r\n                    SPHelper.getFieldProperty(field.id.toString(), \"RichText\", context, false).then(richText => {\r\n                        const isRichText: boolean = richText === 'TRUE';\r\n                        if (isRichText) {\r\n                            resolve(GeneralHelper.getTextFromHTML(strFieldValue));\r\n                        }\r\n                        resolve(fieldValue);\r\n                    });\r\n                    break;\r\n                case 'DateTime':\r\n                    const friendlyDisplay: string = SPHelper.getRowItemValueByName(listItem, `${fieldName}.FriendlyDisplay`);\r\n                    resolve(friendlyDisplay ? GeneralHelper.getRelativeDateTimeString(friendlyDisplay) : strFieldValue);\r\n                    break;\r\n                case 'User':\r\n                case 'UserMulti':\r\n                    const titles: string[] = [];\r\n                    const users: IPrincipal[] = <IPrincipal[]>fieldValue;\r\n\r\n                    if (!users) {\r\n                        resolve('');\r\n                    }\r\n\r\n                    for (let i = 0, len = users.length; i < len; i++) {\r\n                        titles.push(users[i].title);\r\n                    }\r\n                    resolve(titles.join('\\n'));\r\n                    break;\r\n                case \"Lookup\":\r\n                case \"LookupMulti\":\r\n                    const lookupValues = fieldValue as ISPFieldLookupValue[];\r\n\r\n                    if (!lookupValues) {\r\n                        resolve('');\r\n                    }\r\n\r\n                    const lookupTexts: string[] = [];\r\n                    for (let i = 0, len = lookupValues.length; i < len; i++) {\r\n                        lookupTexts.push(lookupValues[i].lookupValue);\r\n                    }\r\n                    resolve(lookupTexts.join('\\n'));\r\n                    break;\r\n                case 'URL':\r\n                    SPHelper.getFieldProperty(field.id.toString(), 'Format', context, true).then(format => {\r\n                        const isImage: boolean = format === 'Image';\r\n                        if (isImage) {\r\n                            resolve('');\r\n                        }\r\n                        resolve(SPHelper.getRowItemValueByName(listItem, `${fieldName}.desc`));\r\n                    });\r\n                    break;\r\n                case 'Taxonomy':\r\n                case 'TaxonomyFieldType':\r\n                case 'TaxonomyFieldTypeMulti':\r\n                    const terms: ITerm[] = Array.isArray(fieldValue) ? <ITerm[]>fieldValue : <ITerm[]>[fieldValue];\r\n\r\n                    if (!terms) {\r\n                        resolve('');\r\n                    }\r\n\r\n                    const termTexts: string[] = [];\r\n                    for (let i = 0, len = terms.length; i < len; i++) {\r\n                        termTexts.push(terms[i].Label);\r\n                    }\r\n                    resolve(termTexts.join('\\n'));\r\n                    break;\r\n                case 'Attachments':\r\n                    resolve('');\r\n                    break;\r\n                case 'Computed':\r\n                    const storedName: string = this.getStoredFieldName(fieldName);\r\n                    if (storedName === 'URL') {\r\n                        resolve(this.getRowItemValueByName(listItem, 'URL.desc') || strFieldValue);\r\n                    }\r\n                    resolve(strFieldValue);\r\n                    break;\r\n                default:\r\n                    resolve(strFieldValue);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets property of the Field by Field's ID and Property Name\r\n     * @param fieldId Field's ID\r\n     * @param propertyName Property name\r\n     * @param context SPFx context\r\n     * @param fromSchemaXml true if the field should be read from Field Schema Xml\r\n     */\r\n    public static getFieldProperty(fieldId: string, propertyName: string, context: IContext, fromSchemaXml: boolean): Promise<any> {\r\n        return new Promise<any>(resolve => {\r\n            let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\r\n            const viewId: string = SPHelper.getPageViewId(context);\r\n\r\n            if (!loadedViewFields) {\r\n                loadedViewFields = {};\r\n            }\r\n\r\n            if (!loadedViewFields[viewId]) {\r\n                loadedViewFields[viewId] = {};\r\n            }\r\n\r\n            let field: ISPField = loadedViewFields[viewId][fieldId];\r\n            if (!field) {\r\n                field = {\r\n                    Id: fieldId\r\n                };\r\n            }\r\n\r\n\r\n            if (GeneralHelper.isDefined(field[propertyName])) {\r\n                resolve(field[propertyName]);\r\n                return;\r\n            }\r\n\r\n            sp.setup({\r\n                spfxContext: context\r\n            });\r\n\r\n            if (fromSchemaXml) {\r\n                SPHelper.getFieldSchemaXmlById(fieldId, context.pageContext.list.title, context).then(schemaXml => {\r\n                    let fieldValue: string;\r\n                    const xml: Document = GeneralHelper.parseXml(schemaXml);\r\n                    const fieldEls = xml.getElementsByTagName('Field');\r\n                    if (fieldEls.length) {\r\n                        const fieldEl = fieldEls[0];\r\n                        fieldValue = fieldEl.getAttribute(propertyName);\r\n                        if (!GeneralHelper.isDefined(fieldValue)) {\r\n                            fieldValue = fieldEl.textContent;\r\n                        }\r\n                    }\r\n                    if (!GeneralHelper.isDefined(fieldValue)) {\r\n                        fieldValue = '';\r\n                    }\r\n                    field[propertyName] = fieldValue;\r\n                    SPHelper._updateFieldInSessionStorage(field, context);\r\n                }, (error) => {\r\n                    resolve('');\r\n                });\r\n            }\r\n            else {\r\n                sp.web.lists.getByTitle(context.pageContext.list.title).fields.getById(fieldId).select(propertyName).get().then(f => {\r\n                    field[propertyName] = f[propertyName];\r\n\r\n                    loadedViewFields[viewId][field.Id] = field;\r\n\r\n                    SPHelper._updateSessionStorageLoadedViewFields(loadedViewFields);\r\n                    resolve(field);\r\n                }, (error) => {\r\n                    resolve('');\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously gets the Diplay Form Url for the Lookup field\r\n     * @param fieldId Field Id\r\n     * @param context SPFx Context\r\n     */\r\n    public static getLookupFieldListDispFormUrl(fieldId: string, context: IContext): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\r\n            const viewId: string = SPHelper.getPageViewId(context);\r\n\r\n            if (!loadedViewFields) {\r\n                loadedViewFields = {};\r\n            }\r\n\r\n            if (!loadedViewFields[viewId]) {\r\n                loadedViewFields[viewId] = {};\r\n            }\r\n\r\n            let field: ISPField = loadedViewFields[viewId][fieldId];\r\n            if (!field) {\r\n                field = {\r\n                    Id: fieldId\r\n                };\r\n            }\r\n\r\n            if (GeneralHelper.isDefined(field.LookupDisplayUrl)) {\r\n                resolve(field.LookupDisplayUrl);\r\n                return;\r\n            }\r\n            sp.setup({\r\n                spfxContext: context\r\n            });\r\n            sp.web.lists.getByTitle(context.pageContext.list.title).fields.getById(fieldId).select('LookupWebId', 'LookupList').get().then(f => {\r\n                sp.site.openWebById(f.LookupWebId).then(openedWeb => {\r\n                    openedWeb.web.select('Url').get().then(w => {\r\n                        field.LookupDisplayUrl = `${w.Url}/_layouts/15/listform.aspx?PageType=4&ListId=${f.LookupList}`;\r\n                        SPHelper._updateFieldInSessionStorage(field, context);\r\n                        resolve(field.LookupDisplayUrl);\r\n                    }, (error) => {\r\n                        reject(error);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets column's value for the row using List Item Accessor.\r\n     * This method works with private property _values of List Item Accessor to get such values as FriendlyDisplay text for Date, and more.\r\n     * @param listItem List Item Accessor\r\n     * @param itemName column name\r\n     */\r\n    public static getRowItemValueByName(listItem: ListItemAccessor, itemName: string): any {\r\n        const _values: any = (<any>listItem)._values;\r\n\r\n        if (_values) {\r\n            return (_values as Map<string, any>).get(itemName);\r\n        }\r\n        else {\r\n            //\r\n            // TODO: here we should call make a POST request to _api/web/GetList(@listUrl)/RenderListDataAsStream with correct parameters to get correct data\r\n            // the parameters should contain view, folder, pagination data, etc.\r\n            // I hope that Dev team will expose this data in API before I implement that because it's pretty complicated and they already have it in place\r\n            //\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets SchemaXml for the field by List Title and Field Id\r\n     * @param fieldId Field's Id\r\n     * @param listTitle List Title\r\n     * @param context Customizer's context\r\n     */\r\n    public static getFieldSchemaXmlById(fieldId: string, listTitle: string, context: IContext): Promise<string> {\r\n        return new Promise<string>((resolve) => {\r\n            let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\r\n            const viewId: string = SPHelper.getPageViewId(context);\r\n\r\n            if (!loadedViewFields) {\r\n                loadedViewFields = {};\r\n            }\r\n\r\n            if (!loadedViewFields[viewId]) {\r\n                loadedViewFields[viewId] = {};\r\n            }\r\n\r\n            let field: ISPField = loadedViewFields[viewId][fieldId];\r\n            if (!field) {\r\n                field = {\r\n                    Id: fieldId\r\n                };\r\n            }\r\n\r\n\r\n            if (GeneralHelper.isDefined(field.SchemaXml)) {\r\n                resolve(field.SchemaXml);\r\n                return;\r\n            }\r\n            sp.setup({\r\n                spfxContext: context\r\n            });\r\n\r\n            sp.web.lists.getByTitle(listTitle).fields.getById(fieldId).select('SchemaXml').get().then((f) => {\r\n                field.SchemaXml = f && f.SchemaXml;\r\n\r\n                loadedViewFields[viewId][field.Id] = field;\r\n\r\n                SPHelper._updateSessionStorageLoadedViewFields(loadedViewFields);\r\n                resolve(f ? f.SchemaXml : '');\r\n            }, (error) => {\r\n                resolve('');\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets correct view id from the page\r\n     * @param context SPFx Context\r\n     */\r\n    public static getPageViewId(context: IContext): string {\r\n        const urlParams: URLSearchParams = new URLSearchParams(location.search);\r\n        let viewIdQueryParam: string = urlParams.get('viewid');\r\n        if (viewIdQueryParam && viewIdQueryParam.indexOf('{') !== 0) {\r\n            viewIdQueryParam = `{${viewIdQueryParam}}`;\r\n        }\r\n        return viewIdQueryParam || context.pageContext.legacyPageContext.viewId;\r\n    }\r\n\r\n    /**\r\n     * Returns the user corresponding to the specified member identifier for the current site\r\n     * @param id user id\r\n     * @param context SPFx context\r\n     */\r\n    public static async getUserById(id: number, context: IContext): Promise<any> {\r\n        sp.setup({\r\n            spfxContext: context\r\n        });\r\n\r\n        return sp.web.getUserById(id).get();\r\n    }\r\n\r\n    /**\r\n     * Returns user profile properties\r\n     * @param loginName User's login name\r\n     * @param context SPFx context\r\n     */\r\n    public static async getUserProperties(loginName: string, context: IContext): Promise<any> {\r\n        let url: string;\r\n        url = context.pageContext.web.absoluteUrl;\r\n        url = GeneralHelper.trimSlash(url);\r\n\r\n        url += `/_api/SP.UserProfiles.PeopleManager/GetPropertiesFor('${encodeURIComponent(loginName)}')`;\r\n         return context.spHttpClient.get(url, SPHttpClient.configurations.v1)\r\n            .then((response): Promise<any> => {\r\n                return response.json();\r\n            })\r\n            .then((value) => {\r\n                return value;\r\n            });\r\n    }\r\n\r\n\r\n    private static _updateFieldInSessionStorage(field: ISPField, context: IContext): void {\r\n        let loadedViewFields: { [viewId: string]: IFields } = SPHelper._getLoadedViewFieldsFromStorage();\r\n        if (!loadedViewFields) {\r\n            loadedViewFields = {};\r\n        }\r\n        const viewId: string = SPHelper.getPageViewId(context);\r\n        if (!loadedViewFields[viewId]) {\r\n            loadedViewFields[viewId] = {};\r\n        }\r\n        loadedViewFields[viewId][field.Id] = field;\r\n        SPHelper._updateSessionStorageLoadedViewFields(loadedViewFields);\r\n    }\r\n\r\n    private static _updateSessionStorageLoadedViewFields(loadedViewFields: { [viewId: string]: IFields }): void {\r\n        const sessionStorage: any = window.sessionStorage;\r\n        sessionStorage.setItem(Constants.LoadedViewFieldsKey, JSON.stringify(loadedViewFields));\r\n    }\r\n\r\n    private static _getLoadedViewFieldsFromStorage(): { [viewId: string]: IFields } {\r\n        const loadedViewFields = sessionStorage.getItem(Constants.LoadedViewFieldsKey);\r\n        if (loadedViewFields) {\r\n            return JSON.parse(loadedViewFields);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}"],"sourceRoot":"..\\..\\..\\src"}