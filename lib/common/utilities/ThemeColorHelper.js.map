{"version":3,"sources":["common/utilities/ThemeColorHelper.ts"],"names":[],"mappings":";;AAMA;IAAA;IA6DA,CAAC;IA5DC;;;OAGG;IACW,8BAAa,GAA3B,UAA4B,KAAa;QACvC,IAAI,CAAC;YACH,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,sCAAsC;gBACtC,IAAM,UAAU,GAAa,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACjG,IAAI,cAAY,GAAW,SAAS,CAAC;gBACrC,IAAI,YAAU,GAAW,SAAS,CAAC;gBAEnC,8CAA8C;gBAC9C,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;oBAC1B,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrC,YAAU,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;oBAC/C,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC9C,cAAY,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;oBAC3E,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,0DAA0D;gBAC1D,EAAE,CAAC,CAAC,YAAU,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC;wBACH,kDAAkD;wBAElD,2BAA2B;wBAC3B,IAAM,kBAAkB,GAAQ,MAAM,CAAC,cAAc,CAAC;wBACtD,EAAE,CAAC,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC;4BACrC,MAAM,CAAC,cAAY,CAAC;wBACtB,CAAC;wBACD,IAAM,UAAU,GAAO,kBAAkB,CAAC,KAAK,CAAC;wBAEhD,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC7B,MAAM,CAAC,cAAY,CAAC;wBACtB,CAAC;wBAED,GAAG,CAAC,CAAC,IAAM,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC;4BACjC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gCACxC,QAAQ,CAAC;4BACX,CAAC;4BAED,qDAAqD;4BACrD,EAAE,CAAC,CAAC,OAAO,KAAK,YAAU,CAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;4BACrD,CAAC;wBACH,CAAC;oBACH,CAAC;oBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACf,aAAa;oBACf,CAAC;oBAED,MAAM,CAAC,cAAY,CAAC;gBACtB,CAAC;YACH,CAAC;QACH,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAEjB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACH,uBAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DY,4CAAgB","file":"common/utilities/ThemeColorHelper.js","sourcesContent":["interface Window {\r\n  __themeState__: any;\r\n}\r\n\r\ndeclare var window: Window;\r\n\r\nexport class ThemeColorHelper {\r\n  /**\r\n   * Extracts the color from a theme string\r\n   * @param value The theme string (e.g.: \"[theme:neutralDark, default: #212121]\")\r\n   */\r\n  public static GetThemeColor(value: string): string {\r\n    try {\r\n      if (value.indexOf('theme:') > 0) {\r\n        // This value has a theme substitution\r\n        const themeParts: string[] = value.replace('[', '').replace(']', '').replace('\"', '').split(',');\r\n        let defaultValue: string = undefined;\r\n        let themeValue: string = undefined;\r\n\r\n        // Break the theme string into it's components\r\n        themeParts.forEach(themePart => {\r\n          if (themePart.indexOf('theme:') >= 0) {\r\n            themeValue = themePart.replace('theme:', '');\r\n          } else if (themePart.indexOf('default:') >= 0) {\r\n            defaultValue = themePart.replace('default:', '').replace('\"', '').trim();\r\n          }\r\n        });\r\n\r\n        // If there is a theme value, try to read from environment\r\n        if (themeValue !== undefined) {\r\n          try {\r\n            // This should definitely be easier to do in SPFx!\r\n\r\n            // tslint:disable-next-line\r\n            const themeStateVariable: any = window.__themeState__;\r\n            if (themeStateVariable === undefined) {\r\n              return defaultValue;\r\n            }\r\n            const themeState: {} = themeStateVariable.theme;\r\n\r\n            if (themeState === undefined) {\r\n              return defaultValue;\r\n            }\r\n\r\n            for (const varName in themeState) {\r\n              if (!themeState.hasOwnProperty(varName)) {\r\n                continue;\r\n              }\r\n\r\n              // Cheesy cleanup of variables to remove extra quotes\r\n              if (varName === themeValue) {\r\n                return themeState[varName].replace('\"', '').trim();\r\n              }\r\n            }\r\n          } catch (error) {\r\n            // do nothing\r\n          }\r\n\r\n          return defaultValue;\r\n        }\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n    return value;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}