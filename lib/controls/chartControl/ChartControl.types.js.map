{"version":3,"sources":["controls/chartControl/ChartControl.types.ts"],"names":[],"mappings":";;AA0HA;;GAEG;AACH,IAAY,YAoGX;AApGD,WAAY,YAAY;IACtB;;;OAGG;IACH,qEAAe,CAAA;IAEf;;;OAGG;IACH,qEAAe,CAAA;IAEf;;8DAE0D;IAC1D,qEAAe,CAAA;IAEf;;+DAE2D;IAC3D,qEAAe,CAAA;IAEf;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,+EAAoB,CAAA;IAEpB;;;OAGG;IACH,gFAAoB,CAAA;IAEpB;;;OAGG;IACH,gFAAoB,CAAA;IAEpB;;;OAGG;IACH,gFAAoB,CAAA;IAEpB;;;OAGG;IACH,kFAAqB,CAAA;IAErB;;;OAGG;IACH,kFAAqB,CAAA;IAErB;;;OAGG;IACH,kFAAqB,CAAA;IAErB;;;OAGG;IACH,kFAAqB,CAAA;AACvB,CAAC,EApGW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAoGvB;AAkGD;;GAEG;AACH,oBAAoB;AACP,QAAA,SAAS,GAAG;IACvB,IAAI,EAAE,MAAmB;IACzB,GAAG,EAAE,KAAkB;IACvB,aAAa,EAAE,eAA4B;IAC3C,KAAK,EAAE,OAAoB;IAC3B,QAAQ,EAAE,UAAuB;IACjC,SAAS,EAAE,WAAwB;IACnC,MAAM,EAAE,QAAqB;IAC7B,GAAG,EAAE,KAAkB;IACvB,OAAO,EAAE,SAAsB;CAChC,CAAC;AACF,mBAAmB","file":"controls/chartControl/ChartControl.types.js","sourcesContent":["/*\r\n* Parameter descriptions are from https://www.chartjs.org/docs/latest, where possible.\r\n*/\r\nimport {\r\n  Chart,\r\n  ChartSize,\r\n  ChartData,\r\n  ChartOptions\r\n} from 'chart.js';\r\n\r\n/**\r\n * The properties for the ChartComponent object\r\n */\r\nexport interface IChartControlProps {\r\n  /**\r\n   * Provides an accessible version of the chart for\r\n   * users with visual impairment\r\n   */\r\n  accessibility?: IChartAccessibility;\r\n\r\n  /**\r\n  The data to be displayed in the chart\r\n  @type {ChartData}\r\n  */\r\n  data?: ChartData;\r\n\r\n  /**\r\n  Promise to the data to be displayed in the chart.\r\n  ChartControl will automatically display data when\r\n  promise returns.\r\n  @type {Promise<ChartData>}\r\n  */\r\n  datapromise?: Promise<Chart.ChartData>;\r\n\r\n  /**\r\n  If using datapromises, sets the content to display while loading the data.\r\n  @type {JSX.Element | Function}\r\n   */\r\n  loadingtemplate?: JSX.Element | Function;\r\n\r\n  /**\r\n  If using datapromises, sets the content to display when a promise is rejected\r\n  @type {JSX.Element | Function}\r\n   */\r\n  rejectedtemplate?: JSX.Element | Function;\r\n\r\n  /**\r\n  The options for the chart\r\n  @type {ChartOptions}\r\n   */\r\n  options?: ChartOptions;\r\n\r\n  /**\r\n   The type of chart to render\r\n   @type {ChartType}\r\n   */\r\n  type: ChartType;\r\n\r\n  /**\r\n   The custom CSS classname\r\n   @type {string}\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Specifies one of the Office color palettes.\r\n   * If the background color is set in the datasets, this option will be overwritten.\r\n   */\r\n  palette?: ChartPalette;\r\n\r\n  /**\r\n   Plugins are the most efficient way to customize or change the default behavior of a chart.\r\n   They have been introduced in chart.js version 2.1.0 (global plugins only) and extended\r\n   in version 2.5.0 (per chart plugins and options).\r\n   @type {object[]} an array of plugins\r\n   */\r\n  plugins?: object[];\r\n\r\n  /**\r\n   * Enables or disables the chart control's ability to detect the environment themes.\r\n   * @default true\r\n   */\r\n  useTheme?: boolean;\r\n\r\n  /**\r\n   * Called if the event is of type 'mouseup' or 'click'.\r\n   * Called in the context of the chart and passed the event and an array of active elements.\r\n   * If onClick is defined in the chart options, this callback will be ignored.\r\n   * @param event\r\n   * @param activeElements\r\n   */\r\n  onClick?(event?: MouseEvent, activeElements?: Array<{}>): void;\r\n\r\n  /**\r\n   * Called when any of the events fire.\r\n   * Called in the context of the chart and passed the event and an array of active elements (bars, points, etc).\r\n   * If onHover is defined in the chart options, this callback will be ignored\r\n   * @param chart @type {IChartJs}\r\n   * @param event  @type {MouseEvent}\r\n   * @param activeElements @type {Array<{}>}\r\n   */\r\n  onHover?(chart: Chart, event: MouseEvent, activeElements: Array<{}>): void;\r\n\r\n  /**\r\n    * Called when a resize occurs. Gets passed two arguments: the chart instance and the new size.\r\n    * If onResize is defined in the chart options, this callback will be ignored\r\n    * OnResize doesn't get called when the chart doesn't use relative positioning.\r\n    * @param chart @type {IChartJs}  the chart instance\r\n    * @param newSize @type {IChartSize} the new size.\r\n    */\r\n  onResize?(chart: Chart, newSize: ChartSize): void;\r\n}\r\n\r\n/**\r\n * The state of a chart\r\n */\r\nexport interface IChartControlState {\r\n  isLoading: boolean;\r\n  data?: Chart.ChartData;\r\n  rejected?: {};\r\n}\r\n\r\n/**\r\n * The color palettes available within Office.\r\n */\r\nexport enum ChartPalette {\r\n  /**\r\n   * Office Colorful Palette 1:\r\n   * Blue, Orange, Grey, Gold, Blue, Green\r\n   */\r\n  OfficeColorful1,\r\n\r\n  /**\r\n  * Office Colorful Palette 2:\r\n  * Blue, Grey, Blue, Dark Blue, Dark Grey, Dark Blue\r\n   */\r\n  OfficeColorful2,\r\n\r\n  /**\r\n   * Office Colorful Palette 3:\r\n   *  Orange, Gold, Green, Brown, Dark Yellow, Dark Green */\r\n  OfficeColorful3,\r\n\r\n  /**\r\n   * Office Colorful Palette 4:\r\n   * Green, Blue, Gold, Dark Green, Dark Blue, Dark Yellow */\r\n  OfficeColorful4,\r\n\r\n  /**\r\n   * Monochromatic Palette 1:\r\n   * Blue gradient, dark to light\r\n   */\r\n  OfficeMonochromatic1,\r\n\r\n  /**\r\n   * Monochromatic Palette 2:\r\n   * Orange gradient, dark to light\r\n   */\r\n  OfficeMonochromatic2,\r\n\r\n  /**\r\n   * Monochromatic Palette 3:\r\n   * Grey gradient, dark to light\r\n   */\r\n  OfficeMonochromatic3,\r\n\r\n  /**\r\n   * Monochromatic Palette 4:\r\n   * Gold gradient, dark to light\r\n   */\r\n  OfficeMonochromatic4,\r\n\r\n  /**\r\n   * Monochromatic Palette 5:\r\n   * Blue gradient, dark to light\r\n   */\r\n  OfficeMonochromatic5,\r\n\r\n  /**\r\n   * Monochromatic Palette 6:\r\n   * Green gradient, dark to light\r\n   */\r\n  OfficeMonochromatic6,\r\n\r\n  /**\r\n   * Monochromatic Palette 7:\r\n   * Dark Grey, Light Grey, Grey, Dark Grey, Light Grey, Grey\r\n   */\r\n  OfficeMonochromatic7,\r\n\r\n  /**\r\n   * Monochromatic Palette 8:\r\n   * Blue gradient, light to dark\r\n   */\r\n  OfficeMonochromatic8,\r\n\r\n  /**\r\n   * Monochromatic Palette 9:\r\n   * Orange gradient, light to dark\r\n   */\r\n  OfficeMonochromatic9,\r\n\r\n  /**\r\n   * Monochromatic Palette 10:\r\n   * Grey gradient, light to dark\r\n   */\r\n  OfficeMonochromatic10,\r\n\r\n  /**\r\n   * Monochromatic Palette 11:\r\n   * Gold gradient, light to dark\r\n   */\r\n  OfficeMonochromatic11,\r\n\r\n  /**\r\n   * Monochromatic Palette 12:\r\n   * Blue gradient, light to dark\r\n   */\r\n  OfficeMonochromatic12,\r\n\r\n  /**\r\n   * Monochromatic Palette 13:\r\n   * Green gradient, light to dark\r\n   */\r\n  OfficeMonochromatic13\r\n}\r\n\r\nexport interface IChartAccessibility {\r\n  /**\r\n   * Indicates if the chart should render\r\n   * a hidden table that will appear for\r\n   * screen readers\r\n   * @default true\r\n   */\r\n  enable?: boolean;\r\n\r\n  /**\r\n   * Allows you to overwrite the default classname\r\n   * of the accessible table\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Provides a caption for the accessible table\r\n   * @default defaults to the chart's title if any\r\n   */\r\n  caption?: string;\r\n\r\n  /**\r\n   * Provides a summary of the data\r\n   */\r\n  summary?: string;\r\n\r\n  /**\r\n   * Provides an alternate text for the chart.\r\n   */\r\n  alternateText?: string;\r\n\r\n  /**\r\n   * Allows you to custom-render your own accessible table\r\n   */\r\n  onRenderTable?: () => JSX.Element;\r\n}\r\n\r\n/**\r\n * Use this interface if you'd like to create a plugin\r\n */\r\nexport interface IChartPlugin {\r\n   beforeInit?(chartInstance: Chart, options?: {}): void;\r\n  afterInit?(chartInstance: Chart, options?: {}): void;\r\n\r\n  beforeUpdate?(chartInstance: Chart, options?: {}): void;\r\n  afterUpdate?(chartInstance: Chart, options?: {}): void;\r\n\r\n  beforeLayout?(chartInstance: Chart, options?: {}): void;\r\n  afterLayout?(chartInstance: Chart, options?: {}): void;\r\n\r\n  beforeDatasetsUpdate?(chartInstance: Chart, options?: {}): void;\r\n  afterDatasetsUpdate?(chartInstance: Chart, options?: {}): void;\r\n\r\n  // This is called at the start of a render.\r\n  // It is only called once, even if the animation will run\r\n  // for a number of frames. Use beforeDraw or afterDraw\r\n  // to do something on each animation frame\r\n  beforeRender?(chartInstance: Chart, options?: {}): void;\r\n  afterRender?(chartInstance: Chart, options?: {}): void;\r\n\r\n  // Easing is for animation\r\n  beforeDraw?(chartInstance: Chart, easing: string, options?: {}): void;\r\n  afterDraw?(chartInstance: Chart, easing: string, options?: {}): void;\r\n\r\n  // Before the datasets are drawn but after scales are drawn\r\n  beforeDatasetsDraw?(chartInstance: Chart, easing: string, options?: {}): void;\r\n  afterDatasetsDraw?(chartInstance: Chart, easing: string, options?: {}): void;\r\n\r\n  // Called before drawing the `tooltip`. If any plugin returns `false`,\r\n  // the tooltip drawing is cancelled until another `render` is triggered.\r\n  beforeTooltipDraw?(chartInstance: Chart, tooltipData?: {}, options?: {}): void;\r\n  // Called after drawing the `tooltip`. Note that this hook will not,\r\n  // be called if the tooltip drawing has been previously cancelled.\r\n  afterTooltipDraw?(chartInstance: Chart, tooltipData?: {}, options?: {}): void;\r\n\r\n  // Called when an event occurs on the chart\r\n  beforeEvent?(chartInstance: Chart, event: Event, options?: {}): void;\r\n  afterEvent?(chartInstance: Chart, event: Event, options?: {}): void;\r\n\r\n  resize?(chartInstance: Chart, newChartSize: Chart.ChartSize, options?: {}): void;\r\n  destroy?(chartInstance: Chart): void;\r\n}\r\n\r\n/**\r\n * The types of charts available\r\n */\r\nexport type ChartType = 'line'\r\n  | 'bar'\r\n  | 'horizontalBar'\r\n  | 'radar'\r\n  | 'doughnut'\r\n  | 'polarArea'\r\n  | 'bubble'\r\n  | 'pie'\r\n  | 'scatter';\r\n\r\n/**\r\n * The types of charts available\r\n */\r\n/* tslint:disable */\r\nexport const ChartType = {\r\n  Line: 'line' as ChartType,\r\n  Bar: 'bar' as ChartType,\r\n  HorizontalBar: 'horizontalBar' as ChartType,\r\n  Radar: 'radar' as ChartType,\r\n  Doughnut: 'doughnut' as ChartType,\r\n  PolarArea: 'polarArea' as ChartType,\r\n  Bubble: 'bubble' as ChartType,\r\n  Pie: 'pie' as ChartType,\r\n  Scatter: 'scatter' as ChartType\r\n};\r\n/* tslint:enable */\r\n"],"sourceRoot":"..\\..\\..\\src"}