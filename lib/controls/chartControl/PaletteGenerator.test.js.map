{"version":3,"sources":["controls/chartControl/PaletteGenerator.test.ts"],"names":[],"mappings":"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","file":"controls/chartControl/PaletteGenerator.test.js","sourcesContent":["/// <reference types=\"sinon\" />\r\n\r\nimport * as React from 'react';\r\nimport { assert, expect } from 'chai';\r\nimport { PaletteGenerator } from '.';\r\nimport { ChartPalette } from './ChartControl.types';\r\nimport { uniq } from '@microsoft/sp-lodash-subset';\r\n\r\ndeclare const sinon;\r\n\r\ndescribe('PaletteGenerator', () => {\r\n  it('Should repeat palette if array is longer than number of available colors in repeating palette', (done) => {\r\n    let palette: string[] = PaletteGenerator.GetPalette(ChartPalette.OfficeColorful2, 60);\r\n    expect(palette).to.have.length(60);\r\n    done();\r\n  });\r\n\r\n  it('Should stretch palette if array is longer than number of available colors in non-repeating palette', (done) => {\r\n    let palette: string[] = PaletteGenerator.GetPalette(ChartPalette.OfficeMonochromatic1, 60);\r\n    expect(palette).to.have.length(60);\r\n\r\n    // Array shouldn't repeat, so the unique array should be the same length as the returned array\r\n    expect(uniq(palette)).to.have.length(60);\r\n    done();\r\n  });\r\n\r\n  it('Should return the right alpha palette length', (done) => {\r\n    let alphaPalette = PaletteGenerator.alpha(PaletteGenerator.GetPalette(ChartPalette.OfficeColorful1, 60), 0.5);\r\n    expect(alphaPalette).to.have.length(60);\r\n    done();\r\n  });\r\n\r\n  it('Should repeat a shorter array of colors', (done) => {\r\n    let desiredPattern: string[] = [\"#0000ff\", \"#00ff00\", \"#ff0000\"];\r\n    let palette: string[] = PaletteGenerator.generateRepeatingPattern(desiredPattern, 60);\r\n    expect(palette).to.have.length(60);\r\n\r\n    // Array should repeat the same exact values.\r\n    expect(uniq(palette)).to.have.length(3);\r\n    done();\r\n  });\r\n\r\n  it('Should not repeat colors in a gradient', (done) => {\r\n    let gradientExtremes: string[] = [\"#0000ff\", \"#ff0000\"];\r\n    let palette: string[] = PaletteGenerator.generateNonRepeatingGradient(gradientExtremes, 60);\r\n    expect(palette).to.have.length(60);\r\n\r\n    // Array should not repeat\r\n    expect(uniq(palette)).to.have.length(60);\r\n    done();\r\n  });\r\n\r\n\r\n  it('Should return an array of alpha value for a given array of colors', (done) => {\r\n    let arrayColors: string[] = [\"#00ff00\", \"#ff0000\", \"#0000ff\"];\r\n    let alphaColors = PaletteGenerator.alpha(arrayColors, 0.5);\r\n    expect(alphaColors).to.be.an('array');\r\n    expect(alphaColors).to.have.length(3);\r\n    done();\r\n  });\r\n\r\n  it('Should return a single alpha value for a single color', (done) => {\r\n    let singleColor: string = \"#00ff00\";\r\n    let alphaColor = PaletteGenerator.alpha(singleColor, 0.5);\r\n    expect(alphaColor).to.be.a('string');\r\n    done();\r\n  });\r\n\r\n  it('Should return a single alpha value for any valid type of color value', (done) => {\r\n    expect(PaletteGenerator.alpha('red', 0.5)).to.be.a('string');\r\n    expect(PaletteGenerator.alpha('#ff0000', 0.5)).to.be.a('string');\r\n    expect(PaletteGenerator.alpha('rgb(255,0,0)', 0.5)).to.be.a('string');\r\n    expect(PaletteGenerator.alpha('hsl(120,100%,50%)', 0.5)).to.be.a('string');\r\n    done();\r\n  });\r\n});\r\n\r\n"],"sourceRoot":"..\\..\\..\\src"}