{"version":3,"sources":["controls/dateTimePicker/HoursComponent.tsx"],"names":[],"mappings":"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","file":"controls/dateTimePicker/HoursComponent.js","sourcesContent":["import * as strings from 'ControlStrings';\r\nimport * as React from 'react';\r\nimport { IHoursComponentProps } from './ITimeComponentProps';\r\nimport { TimeConvention } from './DateTimeConventions';\r\nimport { MaskedTextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { TimeHelper } from './TimeHelper';\r\nimport { IDropdownOption, Dropdown } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { TimeDisplayControlType } from './TimeDisplayControlType';\r\n\r\n/**\r\n * Hours component, this renders the hours dropdown\r\n */\r\nexport default class HoursComponent extends React.Component<IHoursComponentProps, {}> {\r\n\r\n  private _hours: IDropdownOption[];\r\n\r\n  constructor(props: IHoursComponentProps) {\r\n    super(props);\r\n\r\n    this._initHoursOptions();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      disabled,\r\n      timeConvention,\r\n      value,\r\n      timeDisplayControlType,\r\n      onChange\r\n    } = this.props;\r\n    const renderDropdown = timeDisplayControlType === TimeDisplayControlType.Dropdown;\r\n    if (renderDropdown) {\r\n      return (\r\n        <Dropdown\r\n          disabled={this.props.disabled}\r\n          label=''\r\n          options={this._hours}\r\n          onChanged={option => {\r\n            onChange(option.text);\r\n          }}\r\n          dropdownWidth={110} />);\r\n    }\r\n    else {\r\n      return (\r\n        <MaskedTextField disabled={disabled}\r\n          label=\"\"\r\n          value={value ? TimeHelper.hoursValue(value, timeConvention) : `${timeConvention === TimeConvention.Hours24 ? \"00\" : \"12 AM\"}`}\r\n          mask={timeConvention === TimeConvention.Hours24 ? \"29\" : \"19 AM\"}\r\n          maskFormat={{\r\n            '1': /[0-1]/,\r\n            '2': /[0-2]/,\r\n            '9': /[0-9]/,\r\n            'A': /[AaPp]/,\r\n            'M': /[Mm]/\r\n          }}\r\n          onGetErrorMessage={(val) => {\r\n            let message = \"\";\r\n            const hours: number = parseInt(val);\r\n            if (isNaN(hours)) {\r\n              message = strings.DateTimePickerHourValueInvalid;\r\n            }\r\n\r\n            if (!message && timeConvention === TimeConvention.Hours24) {\r\n              message = hours > 23 ? strings.DateTimePickerHourValueInvalid : \"\";\r\n            } else {\r\n              message = hours > 12 ? strings.DateTimePickerHourValueInvalid : \"\";\r\n            }\r\n\r\n            if (!message) {\r\n              onChange(val);\r\n            }\r\n\r\n            return message;\r\n          }} />\r\n      );\r\n    }\r\n  }\r\n\r\n  private _initHoursOptions() {\r\n    const amDesignator = 'AM';\r\n    const pmDesignator = 'PM';\r\n\r\n    const {\r\n      value,\r\n      timeConvention\r\n    } = this.props;\r\n    /*if (strings.AMDesignator) {\r\n      amDesignator = ` ${strings.AMDesignator}`;\r\n    }\r\n    if (strings.PMDesignator) {\r\n      pmDesignator = ` ${strings.PMDesignator}`;\r\n    }*/\r\n\r\n    let hours: IDropdownOption[] = [];\r\n    for (let i = 0; i < 24; i++) {\r\n      let digit: string;\r\n      if (this.props.timeConvention === TimeConvention.Hours24) {\r\n        // 24 hours time convention\r\n        if (i < 10) {\r\n          digit = '0' + i;\r\n        } else {\r\n          digit = i.toString();\r\n        }\r\n      } else {\r\n        // 12 hours time convention\r\n        if (i === 0) {\r\n          digit = `12${amDesignator}`;\r\n        } else if (i < 12) {\r\n          digit = `${i}${amDesignator}`;\r\n        } else {\r\n          if (i === 12) {\r\n            digit = `12${pmDesignator}`;\r\n          } else {\r\n            digit = `${(i % 12)}${pmDesignator}`;\r\n          }\r\n        }\r\n      }\r\n\r\n      let selected: boolean = false;\r\n      if (i === value) {\r\n        selected = true;\r\n      }\r\n\r\n      hours.push({ key: i, text: digit, isSelected: selected });\r\n    }\r\n\r\n    this._hours = hours;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}