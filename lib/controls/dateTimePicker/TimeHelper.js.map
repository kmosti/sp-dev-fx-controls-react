{"version":3,"sources":["controls/dateTimePicker/TimeHelper.ts"],"names":[],"mappings":";;AAAA,sBAAmC;AAEnC;IAAA;IAuDA,CAAC;IArDC;;;;OAIG;IACW,sBAAW,GAAzB,UAA0B,KAAU;QAClC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,eAAe,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC9F,CAAC;IAED;;;;OAIG;IACW,oBAAS,GAAvB,UAAwB,IAAU;QAChC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC;IAClE,CAAC;IAED;;OAEG;IACW,qBAAU,GAAxB,UAAyB,KAAa,EAAE,IAAgB;QAAhB,qBAAA,EAAA,QAAgB;QACtD,OAAO,KAAK,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;YAC3B,KAAK,GAAG,MAAI,KAAO,CAAC;QACtB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACW,qBAAU,GAAxB,UAAyB,KAAa,EAAE,cAA8B;QACpE,EAAE,CAAC,CAAC,cAAc,KAAK,iBAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9C,2BAA2B;YAC3B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,2BAA2B;YAC3B,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,OAAO,CAAC;YACjB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAK,CAAC;YACnD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;oBACjB,MAAM,CAAC,OAAO,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAI,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAK,CAAC;gBAC1D,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IACH,iBAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDY,gCAAU","file":"controls/dateTimePicker/TimeHelper.js","sourcesContent":["import { TimeConvention } from \".\";\r\n\r\nexport class TimeHelper {\r\n\r\n  /**\r\n   * Check if value is a valid date\r\n   *\r\n   * @param value\r\n   */\r\n  public static isValidDate(value: any): value is Date {\r\n    return Object.prototype.toString.call(value) === '[object Date]' && !isNaN(value.getTime());\r\n  }\r\n\r\n  /**\r\n   * Clone the date\r\n   *\r\n   * @param date\r\n   */\r\n  public static cloneDate(date: Date): Date {\r\n    return this.isValidDate(date) ? new Date(date.getTime()) : null;\r\n  }\r\n\r\n  /**\r\n   * Suffix number with zero\r\n   */\r\n  public static suffixZero(value: string, size: number = 2) {\r\n    while (value.length < size) {\r\n      value = `0${value}`;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Format the hours value\r\n   *\r\n   * @param hours\r\n   * @param timeConvention\r\n   */\r\n  public static hoursValue(hours: number, timeConvention: TimeConvention): string {\r\n    if (timeConvention === TimeConvention.Hours24) {\r\n      // 24 hours time convention\r\n      return this.suffixZero(hours.toString());\r\n    } else {\r\n      // 12 hours time convention\r\n      if (hours === 0) {\r\n        return `12 AM`;\r\n      } else if (hours < 12) {\r\n        return `${this.suffixZero(hours.toString())} AM`;\r\n      } else {\r\n        if (hours === 12) {\r\n          return `12 PM`;\r\n        } else {\r\n          return `${this.suffixZero((hours % 12).toString())} PM`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}