{"version":3,"sources":["controls/fields/fieldBaseTextRenderer/FieldBaseTextRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,6BAA+B;AAC/B,kEAA2D;AAE3D,yFAAyD;AAEzD,qDAAuD;AAoBvD;;GAEG;AACH;IAA2C,yCAAyE;IAChH,+BAAoB,KAAkC,EAAE,KAAkC;QAA1F,YACI,kBAAM,KAAK,EAAE,KAAK,CAAC,SAKtB;QAHG,SAAS,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;QAE7C,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IACpB,CAAC;IAGM,sCAAM,GAAb;QACI,IAAM,IAAI,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,CAAC;QAC5C,MAAM,CAAC,CAAC,6BAAK,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,2CAAM,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC5F,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,GAAG,kCAAO,IAAI,CAAQ;YACrD,IAAI,CAAC,KAAK,CAAC,QAAQ,CACd,CAAC,CAAC;IACZ,CAAC;IAND;QADC,qBAAQ;uDAOR;IACL,4BAAC;CAjBD,AAiBC,CAjB0C,KAAK,CAAC,SAAS,GAiBzD;AAjBY,sDAAqB","file":"controls/fields/fieldBaseTextRenderer/FieldBaseTextRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\r\nimport * as React from 'react';\r\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\nimport styles from './FieldBaseTextRenderer.module.scss';\r\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\r\nimport * as telemetry from '../../../common/telemetry';\r\n\r\nexport interface IFieldBaseTextRendererProps extends IFieldRendererProps {\r\n    /**\r\n     * text to be displayed\r\n     */\r\n    text?: string;\r\n    /**\r\n     * true if no need to render span element with text content\r\n     */\r\n    noTextRender?: boolean;\r\n}\r\n\r\n/**\r\n * For future\r\n */\r\nexport interface IFieldBaseTextRendererState {\r\n\r\n}\r\n\r\n/**\r\n * Base renderer. Used to render text.\r\n */\r\nexport class FieldBaseTextRenderer extends React.Component<IFieldBaseTextRendererProps, IFieldBaseTextRendererState> {\r\n    public constructor (props: IFieldBaseTextRendererProps, state: IFieldBaseTextRendererState) {\r\n        super(props, state);\r\n\r\n        telemetry.track('FieldBaseTextRenderer', {});\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    @override\r\n    public render(): JSX.Element {\r\n        const text: string = this.props.text || ' ';\r\n        return (<div className={css(this.props.className, styles.baseText)} style={this.props.cssProps}>\r\n        { this.props.noTextRender ? null : <span>{text}</span> }\r\n        {this.props.children}\r\n        </div>);\r\n    }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}