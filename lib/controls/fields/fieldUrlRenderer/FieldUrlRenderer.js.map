{"version":3,"sources":["controls/fields/fieldUrlRenderer/FieldUrlRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AACjD,6BAA+B;AAC/B,kEAA2D;AAC3D,wDAAuD;AAGvD,qDAAuD;AAEvD,+EAAoD;AAwBpD;;;;GAIG;AACH;IAAsC,oCAA+D;IACjG,0BAAmB,KAA6B,EAAE,KAA6B;QAA/E,YACI,kBAAM,KAAK,EAAE,KAAK,CAAC,SAKtB;QAHG,SAAS,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QAExC,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IACpB,CAAC;IAGM,iCAAM,GAAb;QACI,IAAM,UAAU,GAAY,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QAElD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,CAAC,6BAAK,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,sCAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;gBAAE,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAI,CAAM,CAAC,CAAC;QACjM,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,CAAC,oBAAC,WAAI,IAAC,SAAS,EAAE,eAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,sCAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAQ,CAAC,CAAC;QACnK,CAAC;IACL,CAAC;IAEO,sCAAW,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAbD;QADC,qBAAQ;kDAUR;IAKL,uBAAC;CAxBD,AAwBC,CAxBqC,KAAK,CAAC,SAAS,GAwBpD;AAxBY,4CAAgB","file":"controls/fields/fieldUrlRenderer/FieldUrlRenderer.js","sourcesContent":["import { override } from '@microsoft/decorators';\r\nimport * as React from 'react';\r\nimport { css } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\n\r\nimport { IFieldRendererProps } from '../fieldCommon/IFieldRendererProps';\r\nimport * as telemetry from '../../../common/telemetry';\r\n\r\nimport styles from './FieldUrlRenderer.module.scss';\r\n\r\nexport interface IFieldUrlRendererProps extends IFieldRendererProps {\r\n    /**\r\n     * text to be displayed\r\n     */\r\n    text?: string;\r\n    /**\r\n     * url\r\n     */\r\n    url: string;\r\n    /**\r\n     * if the field should be rendered as image\r\n     */\r\n    isImageUrl?: boolean;\r\n}\r\n\r\n/**\r\n * For future\r\n */\r\nexport interface IFieldUrlRendererState {\r\n\r\n}\r\n\r\n/**\r\n * Field URL Renderer.\r\n * Used for:\r\n *   - URL (Hyperlink, Image)\r\n */\r\nexport class FieldUrlRenderer extends React.Component<IFieldUrlRendererProps, IFieldUrlRendererState> {\r\n    public constructor(props: IFieldUrlRendererProps, state: IFieldUrlRendererState) {\r\n        super(props, state);\r\n\r\n        telemetry.track('FieldUrlRenderer', {});\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    @override\r\n    public render(): JSX.Element {\r\n        const isImageUrl: boolean = this.props.isImageUrl;\r\n\r\n        if (isImageUrl) {\r\n            return (<div className={css(this.props.className, styles.image)} style={this.props.cssProps} onClick={this._onImgClick.bind(this)}><img src={this.props.url} alt={this.props.text} /></div>);\r\n        }\r\n        else {\r\n            return (<Link className={css(this.props.className, styles.link)} target={'_blank'} href={this.props.url} style={this.props.cssProps}>{this.props.text}</Link>);\r\n        }\r\n    }\r\n\r\n    private _onImgClick(): void {\r\n        window.open(this.props.url, '_blank');\r\n    }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}