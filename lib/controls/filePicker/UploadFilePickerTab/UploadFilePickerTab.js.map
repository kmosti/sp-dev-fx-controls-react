{"version":3,"sources":["controls/filePicker/UploadFilePickerTab/UploadFilePickerTab.tsx"],"names":[],"mappings":"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","file":"controls/filePicker/UploadFilePickerTab/UploadFilePickerTab.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { IUploadFilePickerTabProps, IUploadFilePickerTabState } from '.';\r\nimport { IFilePickerResult } from '../FilePicker.types';\r\nimport { GeneralHelper } from '../../../common/utilities';\r\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/components/Button';\r\n\r\nimport * as strings from 'ControlStrings';\r\nimport styles from './UploadFilePickerTab.module.scss';\r\n\r\n\r\n\r\nexport default class UploadFilePickerTab extends React.Component<IUploadFilePickerTabProps, IUploadFilePickerTabState> {\r\n  constructor(props: IUploadFilePickerTabProps) {\r\n    super(props);\r\n    this.state = {\r\n      filePickerResult: undefined\r\n    };\r\n  }\r\n\r\n  public render(): React.ReactElement<IUploadFilePickerTabProps> {\r\n    const { filePickerResult } = this.state;\r\n    const fileName: string = filePickerResult ? filePickerResult.fileName : null;\r\n    const acceptedFilesExtensions = this.props.accepts ? this.props.accepts.join(\",\") : null;\r\n\r\n    return (\r\n      <div className={styles.tabContainer}>\r\n        <div className={styles.tabHeaderContainer}>\r\n          <h2 className={styles.tabHeader}>{strings.UploadFileHeader}</h2>\r\n        </div>\r\n        <div className={styles.tab}>\r\n          <input\r\n            className={styles.localTabInput}\r\n            type=\"file\" id=\"fileInput\"\r\n            accept={acceptedFilesExtensions} multiple={false} onChange={(event: React.ChangeEvent<HTMLInputElement>) => this._handleFileUpload(event)}\r\n          />\r\n          {\r\n            fileName &&\r\n            /** Display image preview */\r\n            <div className={styles.localTabSinglePreview}>\r\n              {\r\n                this.state.filePreview &&\r\n                <img className={styles.localTabSinglePreviewImage} src={this.state.filePreview} alt={this.state.filePickerResult.fileName} />\r\n              }\r\n            </div>\r\n          }\r\n          <label className={styles.localTabLabel} htmlFor=\"fileInput\">{\r\n            (fileName ? strings.ChangeFileLinkLabel : strings.ChooseFileLinkLabel)\r\n          }</label>\r\n        </div>\r\n        <div className={styles.actionButtonsContainer}>\r\n          <div className={styles.actionButtons}>\r\n            <PrimaryButton\r\n              disabled={!this.state.filePickerResult}\r\n              onClick={() => this._handleSave()} className={styles.actionButton}>{strings.AddFileButtonLabel}</PrimaryButton>\r\n            <DefaultButton onClick={() => this._handleClose()} className={styles.actionButton}>{strings.CancelButtonLabel}</DefaultButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets called when a file is uploaded\r\n   */\r\n  private _handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!event.target.files || event.target.files.length < 1) {\r\n      return;\r\n    }\r\n\r\n    // Get the files that were uploaded\r\n    let files = event.target.files;\r\n\r\n    // Grab the first file -- there should always only be one\r\n    const file: File = files[0];\r\n\r\n    const filePickerResult: IFilePickerResult = {\r\n      fileAbsoluteUrl: null,\r\n      fileName: file.name,\r\n      fileNameWithoutExtension: GeneralHelper.getFileNameWithoutExtension(file.name),\r\n      downloadFileContent: () => { return Promise.resolve(file); }\r\n    };\r\n\r\n    if (GeneralHelper.isImage(file.name)) {\r\n      // Convert to base64 image\r\n      const reader = new FileReader();\r\n\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        this.setState({\r\n          filePreview: reader.result as string\r\n        });\r\n      };\r\n    }\r\n    this.setState({\r\n      filePickerResult\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Saves base64 encoded image back to property pane file picker\r\n   */\r\n  private _handleSave = () => {\r\n    this.props.onSave(this.state.filePickerResult);\r\n  }\r\n\r\n  /**\r\n   * Closes tab without saving\r\n   */\r\n  private _handleClose = () => {\r\n    this.props.onClose();\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}