{"version":3,"sources":["controls/filePicker/controls/DocumentLibraryBrowser/DocumentLibraryBrowser.tsx"],"names":[],"mappings":"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","file":"controls/filePicker/controls/DocumentLibraryBrowser/DocumentLibraryBrowser.js","sourcesContent":["import * as React from 'react';\r\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\r\nimport { List } from 'office-ui-fabric-react/lib/List';\r\nimport { Spinner } from 'office-ui-fabric-react/lib/Spinner';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { IDocumentLibraryBrowserProps, IDocumentLibraryBrowserState } from '.';\r\nimport { ILibrary } from '../../../../services/FileBrowserService.types';\r\n\r\nimport { IRectangle } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\n\r\nimport styles from './DocumentLibraryBrowser.module.scss';\r\nimport * as strings from 'ControlStrings';\r\n\r\n/**\r\n * Rows per page\r\n */\r\nexport const ROWS_PER_PAGE = 3;\r\n\r\n/**\r\n * Maximum row height\r\n */\r\nexport const MAX_ROW_HEIGHT = 250;\r\n\r\n/**\r\n * This would have been better done as an Office Fabric TileList, but it isn't available yet for production use\r\n */\r\nexport class DocumentLibraryBrowser extends React.Component<IDocumentLibraryBrowserProps, IDocumentLibraryBrowserState> {\r\n  private _columnCount: number;\r\n  private _columnWidth: number;\r\n  private _rowHeight: number;\r\n\r\n  constructor(props: IDocumentLibraryBrowserProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: true,\r\n      lists: []\r\n    };\r\n  }\r\n\r\n  public async componentDidMount() {\r\n    const lists = await this.props.fileBrowserService.getSiteMediaLibraries();\r\n    this.setState({\r\n      lists: lists,\r\n      isLoading: false\r\n    });\r\n  }\r\n\r\n  public render(): React.ReactElement<IDocumentLibraryBrowserProps> {\r\n    if (this.state.isLoading) {\r\n      return (<Spinner label={strings.Loading} />);\r\n    }\r\n    const libraries: ILibrary[] = this.state.lists;\r\n\r\n    return (\r\n      <div className={styles.documentLibraryBrowserContainer}>\r\n        <FocusZone>\r\n          <List\r\n            className={styles.filePickerFolderCardGrid}\r\n            items={libraries}\r\n            getItemCountForPage={this._getItemCountForPage}\r\n            getPageHeight={this._getPageHeight}\r\n            renderedWindowsAhead={4}\r\n            onRenderCell={this._onRenderLibraryTile}\r\n          />\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates how many items there should be in the page\r\n   */\r\n  private _getItemCountForPage = (itemIndex: number, surfaceRect: IRectangle): number => {\r\n    if (itemIndex === 0) {\r\n      this._columnCount = Math.ceil(surfaceRect.width / MAX_ROW_HEIGHT);\r\n      this._columnWidth = Math.floor(surfaceRect.width / this._columnCount);\r\n      this._rowHeight = this._columnWidth;\r\n    }\r\n\r\n    return this._columnCount * ROWS_PER_PAGE;\r\n  }\r\n\r\n  /**\r\n   * Gets the height of a list \"page\"\r\n   */\r\n  private _getPageHeight = (): number => {\r\n    return this._rowHeight * ROWS_PER_PAGE;\r\n  }\r\n\r\n  /**\r\n   * Renders a cell for search suggestions\r\n   */\r\n  private _onRenderLibraryTile = (item: ILibrary, index: number | undefined): JSX.Element => {\r\n    const imgSrc = item.iconPath ? item.iconPath : \"\";\r\n\r\n    return (\r\n      <div\r\n        className={styles.filePickerFolderCardTile}\r\n        data-is-focusable={true}\r\n        style={{\r\n          width: 100 / this._columnCount + '%'\r\n        }}\r\n      >\r\n        <div className={styles.filePickerFolderCardSizer}>\r\n          <div className={styles.filePickerFolderCardPadder}>\r\n            <Image src={imgSrc} className={styles.filePickerFolderCardImage} imageFit={ImageFit.cover} />\r\n            <DefaultButton className={styles.filePickerFolderCardLabel} onClick={(_event) => this._handleOpenLibrary(item)}>{item.title}</DefaultButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Calls parent when library is opened\r\n   */\r\n  private _handleOpenLibrary = (library: ILibrary) => {\r\n    this.props.onOpenLibrary(library);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}