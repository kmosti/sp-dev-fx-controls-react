{"version":3,"sources":["controls/listItemPicker/ListItemPicker.tsx"],"names":[],"mappings":"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","file":"controls/listItemPicker/ListItemPicker.js","sourcesContent":["import * as strings from 'ControlStrings';\r\nimport * as React from \"react\";\r\nimport SPservice from \"../../services/SPService\";\r\nimport { escape } from \"@microsoft/sp-lodash-subset\";\r\nimport { TagPicker } from \"office-ui-fabric-react/lib/components/pickers/TagPicker/TagPicker\";\r\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\r\nimport { IListItemPickerProps, IListItemPickerState } from \".\";\r\nimport * as telemetry from '../../common/telemetry';\r\n\r\n\r\nexport class ListItemPicker extends React.Component<IListItemPickerProps, IListItemPickerState> {\r\n  private _spservice: SPservice;\r\n  private selectedItems: any[];\r\n\r\n  constructor(props: IListItemPickerProps) {\r\n    super(props);\r\n\r\n    telemetry.track('ListItemPicker', {});\r\n\r\n    // States\r\n    this.state = {\r\n      noresultsFoundText: !this.props.noResultsFoundText ? strings.genericNoResultsFoundText : this.props.noResultsFoundText,\r\n      showError: false,\r\n      errorMessage: \"\",\r\n      suggestionsHeaderText: !this.props.suggestionsHeaderText ? strings.ListItemPickerSelectValue : this.props.suggestionsHeaderText\r\n    };\r\n\r\n    // Get SPService Factory\r\n    this._spservice = new SPservice(this.props.context);\r\n\r\n    this.selectedItems = [];\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IListItemPickerProps, prevState: IListItemPickerState): void {\r\n    if (this.props.listId !== prevProps.listId) {\r\n      this.selectedItems = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the field\r\n   */\r\n  public render(): React.ReactElement<IListItemPickerProps> {\r\n    const { className, disabled, itemLimit } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <TagPicker onResolveSuggestions={this.onFilterChanged}\r\n                   //   getTextFromItem={(item: any) => { return item.name; }}\r\n                   getTextFromItem={this.getTextFromItem}\r\n                   pickerSuggestionsProps={{\r\n                     suggestionsHeaderText: this.state.suggestionsHeaderText,\r\n                     noResultsFoundText: this.state.noresultsFoundText\r\n                   }}\r\n                   defaultSelectedItems={this.props.defaultSelectedItems || []}\r\n                   onChange={this.onItemChanged}\r\n                   className={className}\r\n                   itemLimit={itemLimit}\r\n                   disabled={disabled} />\r\n\r\n        <Label style={{color:'#FF0000'}}> {this.state.errorMessage} </Label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get text from Item\r\n   */\r\n  private getTextFromItem(item: any): string {\r\n    return item.name;\r\n  }\r\n\r\n  /**\r\n   * On Selected Item\r\n   */\r\n  private onItemChanged = (selectedItems: { key: string; name: string }[]): void => {\r\n    this.selectedItems = selectedItems;\r\n    this.props.onSelectedItem(selectedItems);\r\n  }\r\n\r\n  /**\r\n   * Filter Change\r\n   */\r\n  private onFilterChanged = async (filterText: string, tagList: { key: string; name: string }[]) => {\r\n    let resolvedSugestions: { key: string; name: string }[] = await this.loadListItems(filterText);\r\n\r\n    // Filter out the already retrieved items, so that they cannot be selected again\r\n    if (this.selectedItems && this.selectedItems.length > 0) {\r\n      let filteredSuggestions = [];\r\n      for (const suggestion of resolvedSugestions) {\r\n        const exists = this.selectedItems.filter(sItem => sItem.key === suggestion.key);\r\n        if (!exists || exists.length === 0) {\r\n          filteredSuggestions.push(suggestion);\r\n        }\r\n      }\r\n      resolvedSugestions = filteredSuggestions;\r\n    }\r\n\r\n    if (resolvedSugestions) {\r\n      this.setState({\r\n        errorMessage: \"\",\r\n        showError: false\r\n      });\r\n\r\n      return resolvedSugestions;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function to load List Items\r\n   */\r\n  private loadListItems = async (filterText: string): Promise<{ key: string; name: string }[]> => {\r\n    let { listId, columnInternalName, keyColumnInternalName, webUrl } = this.props;\r\n    let arrayItems: { key: string; name: string }[] = [];\r\n    let keyColumn: string = keyColumnInternalName || 'Id';\r\n\r\n    try {\r\n      let listItems = await this._spservice.getListItems(filterText, listId, columnInternalName, keyColumn, webUrl);\r\n      // Check if the list had items\r\n      if (listItems.length > 0) {\r\n        for (const item of listItems) {\r\n          arrayItems.push({ key: item[keyColumn], name: item[columnInternalName] });\r\n        }\r\n      }\r\n      return arrayItems;\r\n    } catch (error) {\r\n      console.log(`Error get Items`, error);\r\n      this.setState({\r\n        showError: true,\r\n        errorMessage: error.message,\r\n        noresultsFoundText: error.message\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}