{"version":3,"sources":["controls/listPicker/ListPicker.tsx"],"names":[],"mappings":"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","file":"controls/listPicker/ListPicker.js","sourcesContent":["import * as React from 'react';\r\nimport { IDropdownOption, IDropdownProps, Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown';\r\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/components/Spinner';\r\nimport { IListPickerProps, IListPickerState } from './IListPicker';\r\nimport { ISPService } from '../../services/ISPService';\r\nimport { SPServiceFactory } from '../../services/SPServiceFactory';\r\nimport * as telemetry from '../../common/telemetry';\r\n\r\nimport styles from './ListPicker.module.scss';\r\nimport { cloneDeep } from '@microsoft/sp-lodash-subset';\r\n\r\n/**\r\n* Empty list value, to be checked for single list selection\r\n*/\r\nconst EMPTY_LIST_KEY = 'NO_LIST_SELECTED';\r\n\r\n/**\r\n* Renders the controls for the ListPicker component\r\n*/\r\nexport class ListPicker extends React.Component<IListPickerProps, IListPickerState> {\r\n  private _selectedList: string | string[] = null;\r\n\r\n  /**\r\n  * Constructor method\r\n  */\r\n  constructor(props: IListPickerProps) {\r\n    super(props);\r\n\r\n    telemetry.track('ReactListPicker');\r\n\r\n    this.state = {\r\n      options: [],\r\n      loading: false\r\n    };\r\n  }\r\n\r\n  /**\r\n  * Lifecycle hook when component is mounted\r\n  */\r\n  public componentDidMount() {\r\n    this.loadLists();\r\n  }\r\n\r\n  /**\r\n   * componentDidUpdate lifecycle hook\r\n   * @param prevProps\r\n   * @param prevState\r\n   */\r\n  public componentDidUpdate(prevProps: IListPickerProps, prevState: IListPickerState): void {\r\n    if (\r\n      prevProps.baseTemplate !== this.props.baseTemplate ||\r\n      prevProps.includeHidden !== this.props.includeHidden ||\r\n      prevProps.orderBy !== this.props.orderBy\r\n    ) {\r\n      this.loadLists();\r\n    }\r\n\r\n    if (prevProps.selectedList !== this.props.selectedList) {\r\n      this.setSelectedLists();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Loads the list from SharePoint current web site\r\n  */\r\n  private loadLists() {\r\n    const { context, baseTemplate, includeHidden, orderBy, multiSelect, filter } = this.props;\r\n\r\n    // Show the loading indicator and disable the dropdown\r\n    this.setState({ loading: true });\r\n\r\n    const service: ISPService = SPServiceFactory.createService(context, true, 5000);\r\n    service.getLibs({\r\n      baseTemplate: baseTemplate,\r\n      includeHidden: includeHidden,\r\n      orderBy: orderBy,\r\n      filter: filter\r\n    }).then((results) => {\r\n      let options: IDropdownOption[] = [];\r\n\r\n      // Start mapping the lists to the dropdown option\r\n      options = results.value.map(list => ({\r\n        key: list.Id,\r\n        text: list.Title\r\n      }));\r\n\r\n      if (multiSelect !== true) {\r\n        // Add option to unselct list\r\n        options.unshift({\r\n          key: EMPTY_LIST_KEY,\r\n          text: ''\r\n        });\r\n      }\r\n\r\n      this.setSelectedLists();\r\n\r\n      // Hide the loading indicator and set the dropdown options and enable the dropdown\r\n      this.setState({\r\n        loading: false,\r\n        options: options\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the currently selected list\r\n   */\r\n  private setSelectedLists() {\r\n    this._selectedList = cloneDeep(this.props.selectedList);\r\n    this.setState({\r\n      selectedList: this._selectedList\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Raises when a list has been selected\r\n  * @param option the new selection\r\n  * @param index the index of the selection\r\n  */\r\n  private onChanged = (option: IDropdownOption, index?: number): void => {\r\n    const { multiSelect, onSelectionChanged } = this.props;\r\n\r\n    if (multiSelect === true) {\r\n      // Check if option was selected\r\n      let selectedLists = this._selectedList ? cloneDeep(this._selectedList) as string[] : [\"test\"];\r\n      if (option.selected) {\r\n        selectedLists.push(option.key as string);\r\n      } else {\r\n        // Filter out the unselected list\r\n        selectedLists = selectedLists.filter(list => list !== option.key);\r\n      }\r\n      this._selectedList = selectedLists;\r\n    } else {\r\n      this._selectedList = option.key as string;\r\n    }\r\n\r\n    if (onSelectionChanged) {\r\n      onSelectionChanged(cloneDeep(this._selectedList));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Renders the ListPicker controls with Office UI Fabric\r\n  */\r\n  public render(): JSX.Element {\r\n    const { loading, options, selectedList } = this.state;\r\n    const { className, disabled, multiSelect, label, placeHolder } = this.props;\r\n\r\n    const dropdownOptions: IDropdownProps = {\r\n      className: className,\r\n      options: options,\r\n      disabled: ( loading || disabled ),\r\n      label: label,\r\n      placeHolder: placeHolder,\r\n      onChanged: this.onChanged\r\n    };\r\n\r\n    if (multiSelect === true) {\r\n      dropdownOptions.multiSelect = true;\r\n      dropdownOptions.selectedKeys = selectedList as string[];\r\n    } else {\r\n      dropdownOptions.selectedKey = selectedList as string;\r\n    }\r\n\r\n    return (\r\n      <div className={ styles.listPicker }>\r\n        { loading && <Spinner className={ styles.spinner } size={SpinnerSize.xSmall} /> }\r\n        <Dropdown {...dropdownOptions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}