{"version":3,"sources":["controls/listView/IListView.ts"],"names":[],"mappings":";;AAAA,sEAAkF;AAGzE,wBAHW,2BAAa,CAGX;AAEtB,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,qDAAa,CAAA;IACb,uDAAU,CAAA;AACZ,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","file":"controls/listView/IListView.js","sourcesContent":["import { Selection, SelectionMode } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { IColumn, IGroup } from 'office-ui-fabric-react/lib/components/DetailsList';\r\n\r\nexport { SelectionMode };\r\n\r\nexport enum GroupOrder {\r\n  ascending = 1,\r\n  descending\r\n}\r\n\r\nexport interface IListViewProps {\r\n  /**\r\n   * Specify the name of the file URL path which will be used to show the file icon.\r\n   */\r\n  iconFieldName?: string;\r\n  /**\r\n   * The items to render.\r\n   */\r\n  items: any[];\r\n  /**\r\n   * The fields you want to view in your list view\r\n   */\r\n  viewFields?: IViewField[];\r\n  /**\r\n   * The fields you want to group your list view by\r\n   */\r\n  groupByFields?: IGrouping[];\r\n  /**\r\n   * Boolean value to indicate if the component should render in compact mode.\r\n   * Set to false by default\r\n   */\r\n  compact?: boolean;\r\n  /**\r\n   * Specify the item selection mode.\r\n   * By default this is set to none.\r\n   */\r\n  selectionMode?: SelectionMode;\r\n  /**\r\n   * Selection event that passes the selected item(s)\r\n   */\r\n  selection?: (items: any[]) => void;\r\n  /**\r\n   * The index of the items to be select by default\r\n   */\r\n  defaultSelection?: number[];\r\n  /**\r\n   * Specify the placeholder for the filter text box. Default 'Search'\r\n   */\r\n  filterPlaceHolder?: string;\r\n  /**\r\n   * Specify if the filter text box should be rendered.\r\n   */\r\n  showFilter?: boolean;\r\n  /**\r\n   * Specify the initial filter to be applied to the list.\r\n   */\r\n  defaultFilter?: string;\r\n}\r\n\r\nexport interface IListViewState {\r\n  /**\r\n   * Current value of the filter input\r\n   */\r\n  filterValue?: string;\r\n  /**\r\n   * The items to render.\r\n   */\r\n  items: any[];\r\n  /**\r\n   * Given column defitions.\r\n   * If none are provided, default columns will be created based on the item's properties.\r\n   */\r\n  columns?: IColumn[];\r\n\r\n  groups?: IGroup[];\r\n}\r\n\r\nexport interface IGrouping {\r\n  name: string;\r\n  order: GroupOrder;\r\n}\r\n\r\nexport interface IGroupsItems {\r\n  items: any[];\r\n  groups: IGroup[];\r\n}\r\n\r\nexport interface IViewField {\r\n\r\n  /**\r\n   * Name of the field\r\n   */\r\n  name: string;\r\n  /**\r\n   * Name of the field that will be used as the column title\r\n   */\r\n  displayName?: string;\r\n  /**\r\n   * Specify the field name that needs to be used to render a link\r\n   */\r\n  linkPropertyName?: string;\r\n  /**\r\n   * Specify if you want to enable column sorting\r\n   */\r\n  sorting?: boolean;\r\n  /**\r\n   * Specify the minimum width of the column\r\n   */\r\n  minWidth?: number;\r\n  /**\r\n   * Specify the maximum width of the column\r\n   */\r\n  maxWidth?: number;\r\n  /**\r\n   * Determines if the column can be resized.\r\n   */\r\n  isResizable?: boolean;\r\n  /**\r\n   * Override the render method of the field\r\n   */\r\n  render?: (item?: any, index?: number, column?: IColumn) => any;\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}