{"version":3,"sources":["controls/listView/ListView.tsx"],"names":[],"mappings":"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","file":"controls/listView/ListView.js","sourcesContent":["import * as React from 'react';\r\nimport { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, IGroup } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { IListViewProps, IListViewState, IViewField, IGrouping, GroupOrder } from './IListView';\r\nimport { IColumn, IGroupRenderProps } from 'office-ui-fabric-react/lib/components/DetailsList';\r\nimport { findIndex, has, sortBy, isEqual, cloneDeep } from '@microsoft/sp-lodash-subset';\r\nimport { FileTypeIcon, IconType } from '../fileTypeIcon/index';\r\nimport * as strings from 'ControlStrings';\r\nimport { IGroupsItems } from './IListView';\r\nimport * as telemetry from '../../common/telemetry';\r\nimport { TextField } from 'office-ui-fabric-react/lib/components/TextField';\r\nimport { filter } from 'lodash';\r\n\r\n/**\r\n * File type icon component\r\n */\r\nexport class ListView extends React.Component<IListViewProps, IListViewState> {\r\n  private _selection: Selection;\r\n  private originalItems: any[];\r\n  private originalGroups: IGroup[];\r\n  private originalColumns: IColumn[];\r\n\r\n  constructor(props: IListViewProps) {\r\n    super(props);\r\n\r\n    telemetry.track('ReactListView', {\r\n      viewFields: !!props.viewFields,\r\n      groupByFields: !!props.groupByFields,\r\n      selectionMode: !!props.selectionMode,\r\n      selection: !!props.selection,\r\n      defaultSelection: !!props.defaultSelection\r\n    });\r\n\r\n    // Initialize state\r\n    this.state = {\r\n      items: [],\r\n      filterValue: this.props.defaultFilter\r\n    };\r\n\r\n    if (this.props.selection) {\r\n      // Initialize the selection\r\n      this._selection = new Selection({\r\n        // Create the event handler when a selection changes\r\n        onSelectionChanged: () => this.props.selection(this._selection.getSelection())\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook when component is mounted\r\n   */\r\n  public componentDidMount(): void {\r\n    this._processProperties();\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hook when component did update after state or property changes\r\n   * @param prevProps\r\n   * @param prevState\r\n   */\r\n  public componentDidUpdate(prevProps: IListViewProps, prevState: IListViewState): void {\r\n    // select default items\r\n    this._setSelectedItems();\r\n\r\n    if (!isEqual(prevProps, this.props)) {\r\n      // Reset the selected items\r\n      if (this._selection) {\r\n        this._selection.setItems(this.props.items, true);\r\n      }\r\n      // Process list view properties\r\n      this._processProperties();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select all the items that should be selected by default\r\n   */\r\n  private _setSelectedItems(): void {\r\n    if (this.props.items &&\r\n      this.props.items.length > 0 &&\r\n      this.props.defaultSelection &&\r\n      this.props.defaultSelection.length > 0) {\r\n      for (const index of this.props.defaultSelection) {\r\n        if (index > -1) {\r\n          this._selection.setIndexSelected(index, true, false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specify result grouping for the list rendering\r\n   * @param items\r\n   * @param groupByFields\r\n   */\r\n  private _getGroups(items: any[], groupByFields: IGrouping[], level: number = 0, startIndex: number = 0): IGroupsItems {\r\n    // Group array which stores the configured grouping\r\n    let groups: IGroup[] = [];\r\n    let updatedItemsOrder: any[] = [];\r\n    // Check if there are groupby fields set\r\n    if (groupByFields) {\r\n      const groupField = groupByFields[level];\r\n      // Check if grouping is configured\r\n      if (groupByFields && groupByFields.length > 0) {\r\n        // Create grouped items object\r\n        const groupedItems = {};\r\n        items.forEach((item: any) => {\r\n          let groupName = item[groupField.name];\r\n          // Check if the group name exists\r\n          if (typeof groupName === \"undefined\") {\r\n            // Set the default empty label for the field\r\n            groupName = strings.ListViewGroupEmptyLabel;\r\n          }\r\n          // Check if group name is a number, this can cause sorting issues\r\n          if (typeof groupName === \"number\") {\r\n            groupName = `${groupName}.`;\r\n          }\r\n\r\n          // Check if current group already exists\r\n          if (typeof groupedItems[groupName] === \"undefined\") {\r\n            // Create a new group of items\r\n            groupedItems[groupName] = [];\r\n          }\r\n          groupedItems[groupName].push(item);\r\n        });\r\n\r\n        // Sort the grouped items object by its key\r\n        const sortedGroups = {};\r\n        let groupNames = Object.keys(groupedItems);\r\n        groupNames = groupField.order === GroupOrder.ascending ? groupNames.sort() : groupNames.sort().reverse();\r\n        groupNames.forEach((key: string) => {\r\n          sortedGroups[key] = groupedItems[key];\r\n        });\r\n\r\n        // Loop over all the groups\r\n        for (const groupItems in sortedGroups) {\r\n          // Retrieve the total number of items per group\r\n          const totalItems = groupedItems[groupItems].length;\r\n          // Create the new group\r\n          const group: IGroup = {\r\n            name: groupItems === \"undefined\" ? strings.ListViewGroupEmptyLabel : groupItems,\r\n            key: groupItems === \"undefined\" ? strings.ListViewGroupEmptyLabel : groupItems,\r\n            startIndex: startIndex,\r\n            count: totalItems,\r\n          };\r\n          // Check if child grouping available\r\n          if (groupByFields[level + 1]) {\r\n            // Get the child groups\r\n            const subGroup = this._getGroups(groupedItems[groupItems], groupByFields, (level + 1), startIndex);\r\n            subGroup.items.forEach((item) => {\r\n              updatedItemsOrder.push(item);\r\n            });\r\n            group.children = subGroup.groups;\r\n          } else {\r\n            // Add the items to the updated items order array\r\n            groupedItems[groupItems].forEach((item) => {\r\n              updatedItemsOrder.push(item);\r\n            });\r\n          }\r\n          // Increase the start index for the next group\r\n          startIndex = startIndex + totalItems;\r\n          groups.push(group);\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      items: updatedItemsOrder,\r\n      groups\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process all the component properties\r\n   */\r\n  private _processProperties() {\r\n    const { items, iconFieldName, viewFields, groupByFields, showFilter } = this.props;\r\n\r\n    let tempState: IListViewState = cloneDeep(this.state);\r\n    let columns: IColumn[] = null;\r\n    // Check if a set of items was provided\r\n    if (typeof items !== 'undefined' && items !== null) {\r\n      tempState.items = this._flattenItems(items);\r\n    }\r\n\r\n    // Check if an icon needs to be shown\r\n    if (iconFieldName) {\r\n      if (columns === null) { columns = []; }\r\n      const iconColumn = this._createIconColumn(iconFieldName);\r\n      columns.push(iconColumn);\r\n    }\r\n\r\n    // Check if view fields were provided\r\n    if (viewFields) {\r\n      if (columns === null) { columns = []; }\r\n      columns = this._createColumns(viewFields, columns);\r\n    }\r\n\r\n    // Add the columns to the temporary state\r\n    tempState.columns = columns;\r\n\r\n    // Add grouping to the list view\r\n    const grouping = this._getGroups(tempState.items, groupByFields);\r\n    if (grouping.groups.length > 0) {\r\n      tempState.groups = grouping.groups;\r\n      // Update the items\r\n      tempState.items = grouping.items;\r\n    } else {\r\n      tempState.groups = null;\r\n    }\r\n\r\n    // Store the original items and groups objects\r\n    this.originalItems = tempState.items;\r\n    this.originalGroups = tempState.groups;\r\n    this.originalColumns = tempState.columns;\r\n\r\n    // Check if component needs to be filtered\r\n    const { filterValue } = this.state;\r\n    if (filterValue && showFilter) {\r\n      this.setState({\r\n        columns: tempState.columns\r\n      });\r\n      this._updateFilterValue(filterValue);\r\n    } else {\r\n      // Update the current component state with the new values\r\n      this.setState(tempState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flatten all objects in every item\r\n   * @param items\r\n   */\r\n  private _flattenItems(items: any[]): any[] {\r\n    // Flatten items\r\n    const flattenItems = items.map(item => {\r\n      // Flatten all objects in the item\r\n      return this._flattenItem(item);\r\n    });\r\n    return flattenItems;\r\n  }\r\n\r\n  /**\r\n   * Flatten all object in the item\r\n   * @param item\r\n   */\r\n  private _flattenItem(item: any): any {\r\n    let flatItem = {};\r\n    for (let parentPropName in item) {\r\n      // Check if property already exists\r\n      if (!item.hasOwnProperty(parentPropName)) continue;\r\n\r\n      // Check if the property is of type object\r\n      if ((typeof item[parentPropName]) === 'object') {\r\n        // Flatten every object\r\n        const flatObject = this._flattenItem(item[parentPropName]);\r\n        for (let childPropName in flatObject) {\r\n          if (!flatObject.hasOwnProperty(childPropName)) continue;\r\n          flatItem[`${parentPropName}.${childPropName}`] = flatObject[childPropName];\r\n        }\r\n      } else {\r\n        flatItem[parentPropName] = item[parentPropName];\r\n      }\r\n    }\r\n    return flatItem;\r\n  }\r\n\r\n  /**\r\n   * Create an icon column rendering\r\n   * @param iconField\r\n   */\r\n  private _createIconColumn(iconFieldName: string): IColumn {\r\n    return {\r\n      key: 'fileType',\r\n      name: 'File Type',\r\n      iconName: 'Page',\r\n      isIconOnly: true,\r\n      fieldName: 'fileType',\r\n      minWidth: 16,\r\n      maxWidth: 16,\r\n      onRender: (item: any) => {\r\n        return (\r\n          <FileTypeIcon type={IconType.image} path={item[iconFieldName]} />\r\n        );\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns required set of columns for the list view\r\n   * @param viewFields\r\n   */\r\n  private _createColumns(viewFields: IViewField[], crntColumns: IColumn[]): IColumn[] {\r\n    viewFields.forEach(field => {\r\n      crntColumns.push({\r\n        key: field.name,\r\n        name: field.displayName || field.name,\r\n        fieldName: field.name,\r\n        minWidth: field.minWidth || 50,\r\n        maxWidth: field.maxWidth,\r\n        isResizable: field.isResizable,\r\n        onRender: this._fieldRender(field),\r\n        onColumnClick: this._columnClick\r\n      });\r\n    });\r\n    return crntColumns;\r\n  }\r\n\r\n  /**\r\n   * Check how field needs to be rendered\r\n   * @param field\r\n   */\r\n  private _fieldRender(field: IViewField): any | void {\r\n    // Check if a render function is specified\r\n    if (field.render) {\r\n      return field.render;\r\n    }\r\n\r\n    // Check if the URL property is specified\r\n    if (field.linkPropertyName) {\r\n      return (item: any, index?: number, column?: IColumn) => {\r\n        return <a href={item[field.linkPropertyName]}>{item[column.fieldName]}</a>;\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if sorting needs to be set to the column\r\n   * @param ev\r\n   * @param column\r\n   */\r\n  private _columnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\r\n    // Find the field in the viewFields list\r\n    const columnIdx = findIndex(this.props.viewFields, field => field.name === column.key);\r\n    // Check if the field has been found\r\n    if (columnIdx !== -1) {\r\n      const field = this.props.viewFields[columnIdx];\r\n      // Check if the field needs to be sorted\r\n      if (has(field, 'sorting')) {\r\n        // Check if the sorting option is true\r\n        if (field.sorting) {\r\n          const sortDescending = typeof column.isSortedDescending === 'undefined' ? false : !column.isSortedDescending;\r\n          const sortedItems = this._sortItems(this.state.items, column.key, sortDescending);\r\n          // Update the columns\r\n          const sortedColumns = this.state.columns.map(c => {\r\n            if (c.key === column.key) {\r\n              c.isSortedDescending = sortDescending;\r\n              c.isSorted = true;\r\n            } else {\r\n              c.isSorted = false;\r\n              c.isSortedDescending = false;\r\n            }\r\n            return c;\r\n          });\r\n          // Update the grouping\r\n          const groupedItems = this._getGroups(sortedItems, this.props.groupByFields);\r\n          // Update the items and columns\r\n          this.setState({\r\n            items: groupedItems.groups.length > 0 ? groupedItems.items : sortedItems,\r\n            columns: sortedColumns,\r\n            groups: groupedItems.groups.length > 0 ? groupedItems.groups : null,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method updates the controlled value of the filter field\r\n   * @param newValue\r\n   */\r\n  private _updateFilterValue = (filterValue: string) => {\r\n    let items = cloneDeep(this.originalItems);\r\n    let groups = cloneDeep(this.originalGroups);\r\n    const columns = cloneDeep(this.originalColumns);\r\n\r\n    // Check if a value is provided, otherwise revert back to the original list of items\r\n    if (filterValue && items && items.length > 0) {\r\n      items = this._executeFiltering(filterValue, items, columns);\r\n      const grouping = this._getGroups(items, this.props.groupByFields);\r\n\r\n      // Update grouping\r\n      if (grouping.groups.length > 0) {\r\n        groups = grouping.groups;\r\n        // Update the items\r\n        items = grouping.items;\r\n      } else {\r\n        groups = null;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      filterValue,\r\n      items,\r\n      groups\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sort the list of items by the clicked column\r\n   * @param items\r\n   * @param columnName\r\n   * @param descending\r\n   */\r\n  private _sortItems(items: any[], columnName: string, descending = false): any[] {\r\n    // Sort the items\r\n    const ascItems = sortBy(items, [columnName]);\r\n    const sortedItems = descending ? ascItems.reverse() : ascItems;\r\n\r\n    // Check if selection needs to be updated\r\n    if (this._selection) {\r\n      const selection = this._selection.getSelection();\r\n      if (selection && selection.length > 0) {\r\n        // Clear selection\r\n        this._selection.setItems([], true);\r\n        setTimeout(() => {\r\n          // Find new index\r\n          let idxs: number[] = selection.map(item => findIndex(sortedItems, item));\r\n          idxs.forEach(idx => this._selection.setIndexSelected(idx, true, false));\r\n        }, 0);\r\n      }\r\n    }\r\n\r\n    // Return the sorted items list\r\n    return sortedItems;\r\n  }\r\n\r\n  /**\r\n   * Executes filtering. Method tries to indicate if filtering should be executed on a single or all columns.\r\n   * @param filterValue\r\n   * @param items\r\n   * @param columns\r\n   */\r\n  private _executeFiltering(filterValue: string, items: any[], columns: IColumn[]): any[]  {\r\n    const filterSeparator = \":\";\r\n\r\n    let filterColumns = [...columns];\r\n    if (filterValue && filterValue.indexOf(filterSeparator) >= 0) {\r\n      const columnName = filterValue.split(filterSeparator)[0];\r\n      filterValue = filterValue.split(filterSeparator)[1];\r\n\r\n      filterColumns = filter(columns, column => column.fieldName === columnName || column.name === columnName);\r\n    }\r\n\r\n    return this._getFilteredItems(filterValue, items, filterColumns);\r\n  }\r\n\r\n  /**\r\n   * Execute filtering on the provided data set and columns\r\n   * @param filterValue\r\n   * @param items\r\n   * @param columns\r\n   */\r\n  private _getFilteredItems(filterValue: string, items: any[], columns: IColumn[]): any[] {\r\n    if (!filterValue) {\r\n      return items;\r\n    }\r\n\r\n    let result: any[] = [];\r\n    for (const item of items) {\r\n      let addItemToResultSet: boolean = false;\r\n      for (const viewField of columns) {\r\n        if (this._doesPropertyContainsValue(item, viewField.fieldName, filterValue)) {\r\n          addItemToResultSet = true;\r\n          break;\r\n        }\r\n        if (this._doesPropertyContainsValue(item, viewField.name, filterValue)) {\r\n          addItemToResultSet = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (addItemToResultSet) {\r\n        result.push(item);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Check if the item contains property with proper value\r\n   * @param item\r\n   * @param property\r\n   * @param filterValue\r\n   */\r\n  private _doesPropertyContainsValue(item: any, property: string, filterValue: string): boolean {\r\n    const propertyValue = item[property];\r\n    let result = false;\r\n    if (propertyValue) {\r\n      // Case insensitive\r\n      result = propertyValue.toString().toLowerCase().indexOf(filterValue.toLowerCase()) >= 0;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Default React component render method\r\n   */\r\n  public render(): React.ReactElement<IListViewProps> {\r\n    let groupProps: IGroupRenderProps = {};\r\n\r\n    let { showFilter, filterPlaceHolder } = this.props;\r\n    let { filterValue, items } = this.state;\r\n\r\n    // Check if selection mode is single selection,\r\n    // if that is the case, disable the selection on grouping headers\r\n    if (this.props.selectionMode === SelectionMode.single) {\r\n      groupProps = {\r\n        headerProps: {\r\n          onToggleSelectGroup: () => null,\r\n          onGroupHeaderClick: () => null,\r\n        }\r\n      };\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          showFilter && <TextField placeholder={filterPlaceHolder || strings.ListViewFilterLabel} onChanged={this._updateFilterValue} value={filterValue}/>\r\n        }\r\n        <DetailsList\r\n          key=\"ListViewControl\"\r\n          items={items}\r\n          columns={this.state.columns}\r\n          groups={this.state.groups}\r\n          selectionMode={this.props.selectionMode || SelectionMode.none}\r\n          selection={this._selection}\r\n          layoutMode={DetailsListLayoutMode.justified}\r\n          compact={this.props.compact}\r\n          setKey=\"ListViewControl\"\r\n          groupProps={groupProps} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}