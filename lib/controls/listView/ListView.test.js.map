{"version":3,"sources":["controls/listView/ListView.test.tsx"],"names":[],"mappings":"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","file":"controls/listView/ListView.test.js","sourcesContent":["/// <reference types=\"sinon\" />\r\n\r\nimport * as React from 'react';\r\nimport { assert, expect } from 'chai';\r\nimport { mount, ReactWrapper, ShallowWrapper } from 'enzyme';\r\nimport { ListView } from './ListView';\r\nimport { IListViewProps, IViewField } from './IListView';\r\nimport { IconType } from '../fileTypeIcon/IFileTypeIcon';\r\n\r\ndeclare const sinon;\r\n\r\nclass Wrapper extends React.Component {\r\n  public render() {\r\n    return React.Children.only(this.props.children);\r\n  }\r\n}\r\n\r\n/* tslint:disable */\r\ndescribe('<ListView />', () => {\r\n  let listView: ReactWrapper;\r\n\r\n  const dummyItems = [{\r\n    id: 0,\r\n    title: 'Dummy item 1',\r\n    path: 'https://contoso.sharepoint.com/documents/word.docx',\r\n    prop: {\r\n      sub: 1\r\n    }\r\n  }, {\r\n    id: 1,\r\n    title: 'Dummy item 2',\r\n    path: 'https://contoso.sharepoint.com/documents/powerpoint.pptx',\r\n    prop: {\r\n      sub: 2\r\n    }\r\n  }];\r\n\r\n  const dummyViewFields: IViewField[] = [\r\n    {\r\n      name: \"id\",\r\n      displayName: \"ID\",\r\n      sorting: true\r\n    },\r\n    {\r\n      name: \"title\",\r\n      displayName: \"Document title\",\r\n      linkPropertyName: \"path\",\r\n      sorting: false\r\n    },\r\n    {\r\n      name: \"path\",\r\n      render: (item: any) => {\r\n        return <a href={item[\"ServerRelativeUrl\"]}>Link</a>;\r\n      }\r\n    }\r\n  ];\r\n\r\n  afterEach(() => {\r\n    listView.unmount();\r\n  });\r\n\r\n  beforeEach(() => { });\r\n\r\n  it('Test view with an empty array of items', (done) => {\r\n    listView = mount(<ListView items={[]} />).update();\r\n\r\n    expect(listView.state('items')).to.have.length(0);\r\n    expect(listView.state('columns')).to.be.null;\r\n    done();\r\n  });\r\n\r\n  it('Test view with two items', (done) => {\r\n    listView = mount(<ListView items={dummyItems} />).update();\r\n\r\n    expect(listView.state('items')).to.have.length(2);\r\n    expect(listView.state('columns')).to.be.null;\r\n    done();\r\n  });\r\n\r\n  it('Test view by updating the items porperty', (done) => {\r\n    listView = mount(<ListView items={[]} />).update();\r\n    expect(listView.state('items')).to.have.length(0);\r\n    // Update the items property, now two items should be available\r\n    listView.setProps({ items: dummyItems }).update();\r\n    expect(listView.state('items')).to.have.length(2);\r\n    done();\r\n  });\r\n\r\n  it('Test view with iconFieldName', (done) => {\r\n    listView = mount(<ListView items={dummyItems} iconFieldName=\"path\" />).update();\r\n\r\n    expect(listView.state('items')).to.have.length(2);\r\n    expect(listView.state('columns')).to.have.length(1);\r\n    expect(listView.state('columns')[0]).to.have.property('key', 'fileType');\r\n    done();\r\n  });\r\n\r\n  it('Test view with iconFieldName render method', (done) => {\r\n    listView = mount(<ListView items={dummyItems} iconFieldName=\"path\" />).update();\r\n    const iconField = mount(React.createElement(Wrapper, {}, listView.state('columns')[0][\"onRender\"](dummyItems[0])));\r\n\r\n    // Check if Word icon gets rendered\r\n    expect(iconField.find('.ms-BrandIcon--docx')).to.have.length(1);\r\n    done();\r\n  });\r\n\r\n  it('Test view with _flattenItems function', (done) => {\r\n    listView = mount(<ListView items={dummyItems} />).update();\r\n\r\n    expect(listView.state('items')).to.have.length(2);\r\n    expect(listView.state('items')[0]).to.have.property('prop.sub', 1);\r\n    expect(listView.state('items')[1]).to.have.property('prop.sub', 2);\r\n    done();\r\n  });\r\n\r\n  it('Test view with viewFields', (done) => {\r\n    listView = mount(<ListView items={dummyItems} viewFields={dummyViewFields} />).update();\r\n\r\n    expect(listView.state('columns')).to.have.length(3);\r\n\r\n    expect(listView.state('columns')[0]).to.have.property('key', 'id');\r\n    expect(listView.state('columns')[0]).to.have.property('name', 'ID');\r\n    expect(listView.state('columns')[0]).to.have.property('onRender', undefined);\r\n\r\n    expect(listView.state('columns')[1]).to.have.property('key', 'title');\r\n    expect(listView.state('columns')[1]).to.have.property('name', 'Document title');\r\n    // onRender binded function because it is linked to path\r\n    expect(listView.state('columns')[1]).to.have.property('onRender');\r\n\r\n    expect(listView.state('columns')[2]).to.have.property('key', 'path');\r\n    expect(listView.state('columns')[2]).to.have.property('name', 'path');\r\n    // onRender binded function because a custom render function got specified\r\n    expect(listView.state('columns')[2]).to.have.property('onRender');\r\n    done();\r\n  });\r\n\r\n  it('Test out the sorting method', (done) => {\r\n    listView = mount(<ListView items={dummyItems} viewFields={dummyViewFields} />).update();\r\n\r\n    // Check if the ID column is not yet sorted\r\n    expect(listView.state('columns')[0]).not.to.have.property('isSorted');\r\n\r\n    // Test the column click event, this will trigger to sort the items\r\n    listView.instance()[\"_columnClick\"](null, listView.state('columns')[0]);\r\n\r\n    // Check if the column is set to sorted\r\n    expect(listView.state('columns')[0]).to.have.property('isSorted', true);\r\n    expect(listView.state('columns')[0]).to.have.property('isSortedDescending', false);\r\n    // Check if the first item has ID 0 (ascending order)\r\n    expect(listView.state('items')[0]).to.have.property('id', 0);\r\n\r\n    // Do another sorting test, this should sort the items in descending order\r\n    listView.instance()[\"_columnClick\"](null, listView.state('columns')[0]);\r\n    expect(listView.state('columns')[0]).to.have.property('isSorted', true);\r\n    expect(listView.state('columns')[0]).to.have.property('isSortedDescending', true);\r\n    // Check if the first item has ID 0 (ascending order)\r\n    expect(listView.state('items')[0]).to.have.property('id', 1);\r\n\r\n    // Just to be sure, we should go back to ascending order\r\n    listView.instance()[\"_columnClick\"](null, listView.state('columns')[0]);\r\n    // Check if the first item has ID 0 (ascending order)\r\n    expect(listView.state('items')[0]).to.have.property('id', 0);\r\n\r\n    done();\r\n  });\r\n});\r\n/* tslint:enable */\r\n"],"sourceRoot":"..\\..\\..\\src"}