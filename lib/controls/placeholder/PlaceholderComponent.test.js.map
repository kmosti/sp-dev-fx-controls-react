{"version":3,"sources":["controls/placeholder/PlaceholderComponent.test.tsx"],"names":[],"mappings":"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","file":"controls/placeholder/PlaceholderComponent.test.js","sourcesContent":["/// <reference types=\"sinon\" />\r\n\r\nimport * as React from 'react';\r\nimport { assert, expect } from 'chai';\r\nimport { mount, ReactWrapper } from 'enzyme';\r\nimport { Placeholder } from './PlaceholderComponent';\r\nimport { IPlaceholderProps } from './IPlaceholderComponent';\r\nimport styles from './PlaceholderComponent.module.scss';\r\n\r\ndeclare const sinon;\r\n\r\ndescribe('<Placeholder />', () => {\r\n  let placeholder: ReactWrapper;\r\n  const dummyDescription = \"Dummy description\";\r\n  const dummyIcon = \"Add\";\r\n  const dummyText = \"Dummy icon text\";\r\n  const dummyClass = \"dummyClass\";\r\n  const dummyLabel = \"Dummy label\";\r\n  const dummyOnConfigure = sinon.spy((evt) => { /* Nothing to do here */ });\r\n\r\n  afterEach(() => {\r\n    placeholder.unmount();\r\n  });\r\n\r\n  it('Test placeholder without button', (done) => {\r\n    placeholder = mount(<Placeholder description={dummyDescription} iconName={dummyIcon} iconText={dummyText} />);\r\n    done();\r\n  });\r\n\r\n  it('Test placeholder without button', (done) => {\r\n    placeholder = mount(<Placeholder description={dummyDescription} iconName={dummyIcon} iconText={dummyText} />);\r\n\r\n    expect(placeholder.find('i.ms-Icon--Add')).to.have.length(1);\r\n\r\n    expect(placeholder.find(`.${styles.placeholderText}`)).to.have.length(1);\r\n    expect(placeholder.find(`.${styles.placeholderText}`).text()).to.be.equal(dummyText);\r\n\r\n    expect(placeholder.find(`.${styles.placeholderDescriptionText}`)).to.have.length(1);\r\n    expect(placeholder.find(`.${styles.placeholderDescriptionText}`).text()).to.be.equal(dummyDescription);\r\n\r\n    expect(placeholder.find('button')).to.have.length(0);\r\n    done();\r\n  });\r\n\r\n  it('Test placeholder with custom classname', (done) => {\r\n    placeholder = mount(<Placeholder description={dummyDescription} iconName={dummyIcon} iconText={dummyText} contentClassName={dummyClass} />);\r\n\r\n    expect(placeholder.find(`div.${dummyClass}`)).to.have.length(1);\r\n    expect(placeholder.find(`div.${dummyClass} .ms-Icon`)).to.have.length(1);\r\n\r\n    expect(placeholder.find(`div.${dummyClass} button`)).to.have.length(0);\r\n    done();\r\n  });\r\n\r\n  it('Test placeholder with null values', (done) => {\r\n    placeholder = mount(<Placeholder description={null} iconName={null} iconText={null} />);\r\n\r\n    expect(placeholder.find(`div .ms-Icon`)).to.have.length(0);\r\n\r\n    expect(placeholder.find(`div .${styles.placeholderText}`)).to.have.length(1);\r\n    expect(placeholder.find(`div .${styles.placeholderText}`).text()).to.be.equal('');\r\n\r\n    expect(placeholder.find(`div .${styles.placeholderDescriptionText}`)).to.have.length(1);\r\n    expect(placeholder.find(`div .${styles.placeholderDescriptionText}`).text()).to.be.equal('');\r\n\r\n    done();\r\n  });\r\n\r\n  it('Test placeholder with button', (done) => {\r\n    placeholder = mount(<Placeholder description={dummyDescription} iconName={dummyIcon} iconText={dummyText} buttonLabel={dummyLabel} />);\r\n\r\n    expect(placeholder.find(`button`)).to.have.length(1);\r\n    expect(placeholder.find(`button`).text()).to.contain(dummyLabel);\r\n    done();\r\n  });\r\n\r\n  it('Test button onConfigure trigger', (done) => {\r\n    placeholder = mount(<Placeholder description={dummyDescription} iconName={dummyIcon} iconText={dummyText} buttonLabel={dummyLabel} onConfigure={dummyOnConfigure} />);\r\n\r\n    placeholder.find('button').simulate('click');\r\n    /* tslint:disable */\r\n    expect(dummyOnConfigure.called).to.be.true;\r\n    /* tslint:enable */\r\n\r\n    done();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}