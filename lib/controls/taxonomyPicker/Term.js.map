{"version":3,"sources":["controls/taxonomyPicker/Term.tsx"],"names":[],"mappings":"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","file":"controls/taxonomyPicker/Term.js","sourcesContent":["import * as React from 'react';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { ITermProps, ITermState } from './ITaxonomyPicker';\r\n\r\nimport styles from './TaxonomyPicker.module.scss';\r\nimport TermActionsControl from './termActions/TermActionsControl';\r\nimport { UpdateAction, UpdateType } from './termActions';\r\n\r\n\r\n/**\r\n * Term component\r\n * Renders a selectable term\r\n */\r\nexport default class Term extends React.Component<ITermProps, ITermState> {\r\n\r\n  constructor(props: ITermProps) {\r\n    super(props);\r\n\r\n    // Check if current term is selected\r\n    let active = this.props.activeNodes.filter(item => item.key === this.props.term.Id);\r\n\r\n    this.state = {\r\n      selected: active.length > 0,\r\n      termLabel: this.props.term.Name\r\n    };\r\n\r\n    this._handleChange = this._handleChange.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handle the checkbox change trigger\r\n   */\r\n  private _handleChange(ev: React.FormEvent<HTMLElement>, isChecked: boolean) {\r\n    this.setState({\r\n      selected: isChecked\r\n    });\r\n    this.props.changedCallback(this.props.term, isChecked);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle event hook when component retrieves new properties\r\n   * @param nextProps\r\n   * @param nextContext\r\n   */\r\n  public componentWillReceiveProps?(nextProps: ITermProps, nextContext: any): void {\r\n    // If multi-selection is turned off, only a single term can be selected\r\n    if (!this.props.multiSelection) {\r\n      let active = nextProps.activeNodes.filter(item => item.key === this.props.term.Id);\r\n      this.state = {\r\n        selected: active.length > 0,\r\n        termLabel: this.state.termLabel\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the right class name for the term\r\n   */\r\n  private getClassName() {\r\n    if (this.props.term.IsDeprecated) {\r\n      return styles.termDisabled;\r\n    }\r\n\r\n    if (!this.props.term.IsAvailableForTagging) {\r\n      return styles.termNoTagging;\r\n    }\r\n\r\n    return styles.termEnabled;\r\n  }\r\n\r\n  private termActionCallback = (updateAction: UpdateAction): void => {\r\n    if (updateAction == null) {\r\n      return;\r\n    }\r\n\r\n    if (updateAction.updateActionType === UpdateType.updateTermLabel) {\r\n      this.setState({\r\n        termLabel: updateAction.value\r\n      });\r\n    } else {\r\n      this.props.updateTaxonomyTree();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default React render\r\n   */\r\n  public render(): JSX.Element {\r\n    const styleProps: React.CSSProperties = {\r\n      marginLeft: `${(this.props.term.PathDepth * 30)}px`\r\n    };\r\n    const checkBoxStyle: React.CSSProperties = {\r\n      display: \"inline-flex\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className={`${styles.listItem} ${styles.term}`} style={styleProps}>\r\n          <div>\r\n            <Checkbox\r\n              checked={this.state.selected}\r\n              style={checkBoxStyle}\r\n              disabled={this.props.term.IsDeprecated || !this.props.term.IsAvailableForTagging || this.props.disabled}\r\n              className={this.getClassName()}\r\n              label={this.state.termLabel}\r\n              onChange={this._handleChange} />\r\n          </div>\r\n          {\r\n            this.props.termActions &&\r\n            <TermActionsControl term={this.props.term}\r\n                                termActions={this.props.termActions}\r\n                                termActionCallback={this.termActionCallback}\r\n                                spTermService={this.props.spTermService} />\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}