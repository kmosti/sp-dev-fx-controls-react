{"version":3,"sources":["controls/taxonomyPicker/TermParent.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,8DAA0E;AAG1E,mDAAsF;AACtF,+BAA0B;AAE1B,2EAAkD;AAClD,gEAA+D;AAC/D,wCAA0C;AAE1C;;GAEG;AACH;IAAwC,8BAAmD;IAKzF,oBAAY,KAAuB;QAAnC,YACE,kBAAM,KAAK,CAAC,SAQb;QAqCD;;WAEG;QACK,4BAAsB,GAAG,UAAC,EAAgC,EAAE,SAAkB;YACpF,KAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAClE,CAAC,CAAA;QAhDC,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACvC,KAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI;SACf,CAAC;QACF,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IACnD,CAAC;IAED;;OAEG;IACI,uCAAkB,GAAzB;QAAA,iBAmBC;QAlBC,2CAA2C;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CACxB,CAAC;YACC,IAAM,YAAU,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAxD,CAAwD,CAAC,CAAC,KAAK,EAAE,CAAC;YAC7G,EAAE,CAAC,CAAC,YAAU,CAAC,CAAC,CAAC;gBACf,IAAM,WAAW,GAAG,YAAU,CAAC,SAAS,CAAC;gBACzC,IAAI,CAAC,WAAW,GAAG,YAAU,CAAC,IAAI,CAAC;gBACnC,IAAI,WAAW,GAAa,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,YAAU,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,YAAU,CAAC,UAAU,IAAI,CAAC,CAAC,EAAE,KAAK,YAAU,CAAC,EAAE,EAA3G,CAA2G,CAAC,CAAC;gBAEjK,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI;oBAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,YAAU,CAAC,SAAS,CAAC;oBAEvD,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;YAC5B,CAAC;QACH,CAAC;IACH,CAAC;IAGD;;OAEG;IACK,iCAAY,GAApB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;SAC/B,CAAC,CAAC;IACL,CAAC;IAWD;;OAEG;IACI,2BAAM,GAAb;QAAA,iBA6EC;QA5EC,0DAA0D;QAC1D,IAAM,UAAU,GAAwB;YACtC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,GAAG,MAAM;SAChD,CAAC;QAEF,IAAI,OAAO,GAAgB,gCAAO,CAAC;QAEnC,sCAAsC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,eAAa,GAAG,EAAE,CAAC;gBACvB,OAAO,GAAG,CACR,6BAAK,KAAK,EAAE,UAAU,IAElB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,IAAI;oBAClB,IAAI,QAAQ,GAAG,KAAK,CAAC;oBACrB,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,IAAI,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACxE,qEAAqE;wBACrE,QAAQ,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC9D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACb,kCAAkC;4BAClC,eAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBACtC,CAAC;oBACH,CAAC;oBAED,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;wBAChD,8BAA8B;wBAC9B,IAAM,UAAU,GAAG,eAAa,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC;wBAChF,QAAQ,GAAG,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjD,CAAC;oBAED,MAAM,CAAC,oBAAC,cAAI,IAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EACZ,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,EAC9B,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,EACnC,eAAe,EAAE,KAAI,CAAC,KAAK,CAAC,eAAe,EAC3C,cAAc,EAAE,KAAI,CAAC,KAAK,CAAC,cAAc,EACzC,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,WAAW,EACnC,kBAAkB,EAAE,KAAI,CAAC,KAAK,CAAC,kBAAkB,EACjD,aAAa,EAAE,KAAI,CAAC,KAAK,CAAC,aAAa,GAAI,CAAC;gBAC3D,CAAC,CAAC,CAEA,CACP,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,GAAG,6BAAK,SAAS,EAAK,oCAAM,CAAC,QAAQ,SAAI,oCAAM,CAAC,IAAM,IAAG,OAAO,CAAC,qBAAqB,CAAO,CAAC;YACvG,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,GAAG,oBAAC,iBAAO,IAAC,IAAI,EAAE,qBAAW,CAAC,MAAM,GAAI,CAAC;QAClD,CAAC;QAGD,MAAM,CAAC,CACL;YACE,6BAAK,SAAS,EAAK,oCAAM,CAAC,QAAQ,SAAI,oCAAM,CAAC,OAAO,UAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,oCAAM,CAAC,iBAAiB,GAAG,EAAE,CAAE,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY;gBAC5K,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,6BAAY,GAAG,8BAAa,EAAE,GAAG,EAAE,OAAO,CAAC,yBAAyB,EAAE,KAAK,EAAE,OAAO,CAAC,yBAAyB,GAAI;gBAEhJ,iCAAiC;gBACjC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;oBACxD,oBAAC,mBAAQ,IAAC,SAAS,EAAE,oCAAM,CAAC,eAAe,EACjC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,OAAO,EAApC,CAAoC,CAAC,CAAC,MAAM,IAAI,CAAC,EAC7F,QAAQ,EAAE,IAAI,CAAC,sBAAsB,GAAI;gBAErD,6BAAK,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,yBAAQ,GAAG,4BAAW,EAAE,GAAG,EAAE,OAAO,CAAC,yBAAyB,EAAE,KAAK,EAAE,OAAO,CAAC,yBAAyB,GAAI;gBAE1I,IAAI,CAAC,KAAK,CAAC,QAAQ;oBACjB,IAAI,CAAC,WAAW;oBAChB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAEvB;YACN,6BAAK,KAAK,EAAE,UAAU,IACnB,OAAO,CACJ,CACF,CACP,CAAC;IACJ,CAAC;IACH,iBAAC;AAAD,CA5IA,AA4IC,CA5IuC,KAAK,CAAC,SAAS,GA4ItD","file":"controls/taxonomyPicker/TermParent.js","sourcesContent":["import * as React from 'react';\r\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\r\nimport { ITermParentProps, ITermParentState } from './ITaxonomyPicker';\r\nimport { ITerm } from '../../services/ISPTermStorePickerService';\r\nimport { EXPANDED_IMG, COLLAPSED_IMG, TERMSET_IMG, TERM_IMG } from './TaxonomyPicker';\r\nimport Term from './Term';\r\n\r\nimport styles from './TaxonomyPicker.module.scss';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport * as strings from 'ControlStrings';\r\n\r\n/**\r\n * Term Parent component, represents termset or term if anchorId\r\n */\r\nexport default class TermParent extends React.Component<ITermParentProps, ITermParentState> {\r\n\r\n  private _terms : ITerm[];\r\n  private _anchorName : string;\r\n\r\n  constructor(props: ITermParentProps) {\r\n    super(props);\r\n\r\n    this._terms = this.props.termset.Terms;\r\n    this.state = {\r\n      loaded: true,\r\n      expanded: true\r\n    };\r\n    this._handleClick = this._handleClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * componentWillMount\r\n   */\r\n  public componentWillMount() {\r\n    // fix term depth if anchroid for rendering\r\n    if (this.props.anchorId)\r\n    {\r\n      const anchorTerm = this._terms.filter(t => t.Id.toLowerCase() === this.props.anchorId.toLowerCase()).shift();\r\n      if (anchorTerm) {\r\n        const anchorDepth = anchorTerm.PathDepth;\r\n        this._anchorName = anchorTerm.Name;\r\n        var anchorTerms : ITerm[] = this._terms.filter(t => t.PathOfTerm.substring(0, anchorTerm.PathOfTerm.length) === anchorTerm.PathOfTerm && t.Id !== anchorTerm.Id);\r\n\r\n        anchorTerms = anchorTerms.map(term => {\r\n          term.PathDepth = term.PathDepth - anchorTerm.PathDepth;\r\n\r\n          return term;\r\n        });\r\n\r\n        this._terms = anchorTerms;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle the click event: collapse or expand\r\n   */\r\n  private _handleClick() {\r\n    this.setState({\r\n      expanded: !this.state.expanded\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * The term set selection changed\r\n   */\r\n  private termSetSelectionChange = (ev: React.FormEvent<HTMLElement>, isChecked: boolean): void => {\r\n    this.props.termSetSelectedChange(this.props.termset, isChecked);\r\n  }\r\n\r\n\r\n  /**\r\n   * Default React render method\r\n   */\r\n  public render(): JSX.Element {\r\n    // Specify the inline styling to show or hide the termsets\r\n    const styleProps: React.CSSProperties = {\r\n      display: this.state.expanded ? 'block' : 'none'\r\n    };\r\n\r\n    let termElm: JSX.Element = <div />;\r\n\r\n    // Check if the terms have been loaded\r\n    if (this.state.loaded) {\r\n      if (this._terms.length > 0) {\r\n        let disabledPaths = [];\r\n        termElm = (\r\n          <div style={styleProps}>\r\n            {\r\n              this._terms.map(term => {\r\n                let disabled = false;\r\n                if (this.props.disabledTermIds && this.props.disabledTermIds.length > 0) {\r\n                  // Check if the current term ID exists in the disabled term IDs array\r\n                  disabled = this.props.disabledTermIds.indexOf(term.Id) !== -1;\r\n                  if (disabled) {\r\n                    // Push paths to the disabled list\r\n                    disabledPaths.push(term.PathOfTerm);\r\n                  }\r\n                }\r\n\r\n                if (this.props.disableChildrenOfDisabledParents) {\r\n                  // Check if parent is disabled\r\n                  const parentPath = disabledPaths.filter(p => term.PathOfTerm.indexOf(p) !== -1);\r\n                  disabled = parentPath && parentPath.length > 0;\r\n                }\r\n\r\n                return <Term key={term.Id}\r\n                             term={term}\r\n                             termset={this.props.termset.Id}\r\n                             activeNodes={this.props.activeNodes}\r\n                             changedCallback={this.props.changedCallback}\r\n                             multiSelection={this.props.multiSelection}\r\n                             disabled={disabled}\r\n                             termActions={this.props.termActions}\r\n                             updateTaxonomyTree={this.props.updateTaxonomyTree}\r\n                             spTermService={this.props.spTermService} />;\r\n              })\r\n            }\r\n          </div>\r\n        );\r\n      } else {\r\n        termElm = <div className={`${styles.listItem} ${styles.term}`}>{strings.TaxonomyPickerNoTerms}</div>;\r\n      }\r\n    } else {\r\n      termElm = <Spinner type={SpinnerType.normal} />;\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className={`${styles.listItem} ${styles.termset} ${(!this.props.anchorId && this.props.isTermSetSelectable) ? styles.termSetSelectable : \"\"}`} onClick={this._handleClick}>\r\n          <img src={this.state.expanded ? EXPANDED_IMG : COLLAPSED_IMG} alt={strings.TaxonomyPickerExpandTitle} title={strings.TaxonomyPickerExpandTitle} />\r\n          {\r\n            // Show the termset selection box\r\n            (!this.props.anchorId && this.props.isTermSetSelectable) &&\r\n            <Checkbox className={styles.termSetSelector}\r\n                      checked={this.props.activeNodes.filter(a => a.path === \"\" && a.key === a.termSet).length >= 1}\r\n                      onChange={this.termSetSelectionChange} />\r\n          }\r\n          <img src={this.props.anchorId ? TERM_IMG : TERMSET_IMG} alt={strings.TaxonomyPickerMenuTermSet} title={strings.TaxonomyPickerMenuTermSet} />\r\n          {\r\n            this.props.anchorId ?\r\n              this._anchorName :\r\n              this.props.termset.Name\r\n          }\r\n        </div>\r\n        <div style={styleProps}>\r\n          {termElm}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}