{"version":3,"sources":["controls/taxonomyPicker/TermPicker.tsx"],"names":[],"mappings":"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","file":"controls/taxonomyPicker/TermPicker.js","sourcesContent":["import * as React from 'react';\r\nimport { BasePicker, IBasePickerProps, IPickerItemProps } from 'office-ui-fabric-react/lib/Pickers';\r\nimport { IPickerTerm, IPickerTerms } from './ITermPicker';\r\nimport SPTermStorePickerService from './../../services/SPTermStorePickerService';\r\nimport styles from './TaxonomyPicker.module.scss';\r\nimport { ITaxonomyPickerProps } from './ITaxonomyPicker';\r\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\r\nimport * as strings from 'ControlStrings';\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\nimport { ApplicationCustomizerContext } from '@microsoft/sp-application-base';\r\nimport { ITermSet } from '../../services/ISPTermStorePickerService';\r\n\r\nexport class TermBasePicker extends BasePicker<IPickerTerm, IBasePickerProps<IPickerTerm>>\r\n{\r\n\r\n}\r\n\r\nexport interface ITermPickerState {\r\n  terms: IPickerTerms;\r\n}\r\n\r\nexport interface ITermPickerProps {\r\n  termPickerHostProps: ITaxonomyPickerProps;\r\n  context: IWebPartContext | ApplicationCustomizerContext;\r\n  disabled: boolean;\r\n  value: IPickerTerms;\r\n  allowMultipleSelections : boolean;\r\n  isTermSetSelectable?: boolean;\r\n  disabledTermIds?: string[];\r\n  disableChildrenOfDisabledParents?: boolean;\r\n\r\n  onChanged: (items: IPickerTerm[]) => void;\r\n}\r\n\r\nexport default class TermPicker extends React.Component<ITermPickerProps, ITermPickerState> {\r\n  private allTerms: ITermSet = null;\r\n\r\n  /**\r\n   * Constructor method\r\n   */\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.onRenderItem = this.onRenderItem.bind(this);\r\n    this.onRenderSuggestionsItem = this.onRenderSuggestionsItem.bind(this);\r\n    this.onFilterChanged = this.onFilterChanged.bind(this);\r\n    this.onGetTextFromItem = this.onGetTextFromItem.bind(this);\r\n\r\n    this.state = {\r\n      terms: this.props.value\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * componentWillReceiveProps method\r\n   */\r\n  public componentWillReceiveProps(nextProps: ITermPickerProps) {\r\n    // check to see if props is different to avoid re-rendering\r\n    let newKeys = nextProps.value.map(a => a.key);\r\n    let currentKeys = this.state.terms.map(a => a.key);\r\n    if (newKeys.sort().join(',') !== currentKeys.sort().join(',')) {\r\n      this.setState({ terms: nextProps.value });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the item in the picker\r\n   */\r\n  protected onRenderItem(term: IPickerItemProps<IPickerTerm>) {\r\n    return (\r\n      <div className={styles.pickedTermRoot}\r\n           key={term.index}\r\n           data-selection-index={term.index}\r\n           data-is-focusable={!term.disabled && true}>\r\n        <span className={styles.pickedTermText}>{term.item.name}</span>\r\n        {\r\n          !term.disabled && (\r\n            <span className={styles.pickedTermCloseIcon}\r\n              onClick={term.onRemoveItem}>\r\n              <Icon iconName=\"Cancel\" />\r\n            </span>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Renders the suggestions in the picker\r\n   */\r\n  protected onRenderSuggestionsItem(term: IPickerTerm) {\r\n    let termParent = term.termSetName;\r\n    let termTitle = `${term.name} [${term.termSetName}]`;\r\n    if (term.path.indexOf(\";\") !== -1) {\r\n      let splitPath = term.path.split(\";\");\r\n      termParent = splitPath[splitPath.length - 2];\r\n      splitPath.pop();\r\n      termTitle = `${term.name} [${term.termSetName}:${splitPath.join(':')}]`;\r\n    }\r\n    return (\r\n      <div className={styles.termSuggestion} title={termTitle}>\r\n        <div>{term.name}</div>\r\n        <div className={styles.termSuggestionSubTitle}> {strings.TaxonomyPickerInLabel} {termParent ? termParent : strings.TaxonomyPickerTermSetLabel}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When Filter Changes a new search for suggestions\r\n   */\r\n  private async onFilterChanged(filterText: string, tagList: IPickerTerm[]): Promise<IPickerTerm[]> {\r\n    if (filterText !== \"\") {\r\n      let termsService = new SPTermStorePickerService(this.props.termPickerHostProps, this.props.context);\r\n      let terms: IPickerTerm[] = await termsService.searchTermsByName(filterText);\r\n      // Check if the termset can be selected\r\n      if (this.props.isTermSetSelectable) {\r\n        // Retrieve the current termset\r\n        const termSet = await termsService.getTermSet();\r\n        // Check if termset was retrieved and if it contains the filter value\r\n        if (termSet && termSet.Name.toLowerCase().indexOf(filterText.toLowerCase()) === 0) {\r\n          // Add the termset to the suggestion list\r\n          terms.push({\r\n            key: termsService.cleanGuid(termSet.Id),\r\n            name: termSet.Name,\r\n            path: \"\",\r\n            termSet: termsService.cleanGuid(termSet.Id)\r\n          });\r\n        }\r\n      }\r\n      // Filter out the terms which are already set\r\n      const filteredTerms = [];\r\n      const { disabledTermIds, disableChildrenOfDisabledParents } = this.props;\r\n      for (const term of terms) {\r\n        let canBePicked = true;\r\n\r\n        // Check if term is not disabled\r\n        if (disabledTermIds && disabledTermIds.length > 0) {\r\n          // Check if current term need to be disabled\r\n          if (disabledTermIds.indexOf(term.key) !== -1) {\r\n            canBePicked = false;\r\n          } else {\r\n            // Check if child terms need to be disabled\r\n            if (disableChildrenOfDisabledParents) {\r\n              // Check if terms were already retrieved\r\n              if (!this.allTerms) {\r\n                this.allTerms = await termsService.getAllTerms(this.props.termPickerHostProps.termsetNameOrID);\r\n              }\r\n\r\n              // Check if there are terms retrieved\r\n              if (this.allTerms.Terms && this.allTerms.Terms.length > 0) {\r\n                // Find the disabled parents\r\n                const disabledParents = this.allTerms.Terms.filter(t => disabledTermIds.indexOf(t.Id) !== -1);\r\n                // Check if disabled parents were found\r\n                if (disabledParents && disabledParents.length > 0) {\r\n                  // Check if the current term lives underneath a disabled parent\r\n                  const findTerm = disabledParents.filter(pt => term.path.indexOf(pt.PathOfTerm) !== -1);\r\n                  if (findTerm && findTerm.length > 0) {\r\n                    canBePicked = false;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (canBePicked) {\r\n          // Only retrieve the terms which are not yet tagged\r\n          if (tagList.filter(tag => tag.key === term.key).length === 0) {\r\n            filteredTerms.push(term);\r\n          }\r\n        }\r\n      }\r\n      return filteredTerms;\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * gets the text from an item\r\n   */\r\n  private onGetTextFromItem(item: any): any {\r\n    return item.name;\r\n  }\r\n\r\n    /**\r\n   * Render method\r\n   */\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <TermBasePicker\r\n          disabled={this.props.disabled}\r\n          onResolveSuggestions={this.onFilterChanged}\r\n          onRenderSuggestionsItem={this.onRenderSuggestionsItem}\r\n          getTextFromItem={this.onGetTextFromItem}\r\n          onRenderItem={this.onRenderItem}\r\n          defaultSelectedItems={this.props.value}\r\n          selectedItems={this.state.terms}\r\n          onChange={this.props.onChanged}\r\n          itemLimit={!this.props.allowMultipleSelections ? 1 : undefined}\r\n          className={styles.termBasePicker}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}