{"version":3,"sources":["controls/taxonomyPicker/termActions/ButtonTermAction.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,4DAAqE;AACrE,iDAAiG;AAEjG;IAA8C,oCAAyC;IAAvF;QAAA,qEA0GC;QAjGC;;WAEG;QACK,6BAAuB,GAAG,UAAC,UAAuB;YACxD,IAAI,IAAI,GAAW,EAAE,CAAC;YACtB,IAAI,IAAI,GAAW,EAAE,CAAC;YACtB,IAAI,QAAQ,GAAW,EAAE,CAAC;YAC1B,IAAI,QAAQ,GAAW,EAAE,CAAC;YAE1B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,KAAK,uCAAuB,CAAC,IAAI,IAAI,KAAI,CAAC,KAAK,CAAC,YAAY,KAAK,uCAAuB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/J,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC;gBACxB,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC;YAC1B,CAAC;YACD,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,KAAK,uCAAuB,CAAC,IAAI,IAAI,KAAI,CAAC,KAAK,CAAC,YAAY,KAAK,uCAAuB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC7J,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YACjC,CAAC;YAED,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;YAE5B,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;QAC5C,CAAC,CAAA;QAED;;WAEG;QACK,oCAA8B,GAAG;YACvC,IAAI,MAAM,GAAwB;gBAChC,eAAe,EAAE,aAAa;gBAC9B,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,YAAY,KAAK,uCAAuB,CAAC,IAAI,GAAG,MAAM,GAAG,IAAI;gBAC/E,MAAM,EAAE,MAAM;aACf,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAA;QAcD;;WAEG;QACK,qBAAe,GAAG,UAAO,UAAuB;;;;4BACjC,qBAAM,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAA;;wBAAzF,YAAY,GAAG,SAA0E;wBAC/F,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;;;;aAC7C,CAAA;;IA4CH,CAAC;IAxGC;;OAEG;IACI,6CAAkB,GAAzB;QACE,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACtC,CAAC;IAqCD;;OAEG;IACK,uDAA4B,GAApC;QACU,IAAA,oCAAW,CAAgB;QACnC,GAAG,CAAC,CAAiB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW;YAA3B,IAAM,MAAM,oBAAA;YACf,EAAE,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;SACF;IACH,CAAC;IAUD;;OAEG;IACI,iCAAM,GAAb;QAAA,iBAsCC;QArCO,IAAA,eAAkC,EAAhC,cAAI,EAAE,4BAAW,CAAgB;QAEzC,qCAAqC;QACrC,IAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,MAAM,EAAT,CAAS,CAAC,CAAC;QACzD,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,CACL,6BAAK,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,IAElE,WAAW;YACX,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU;gBAClB,IAAA,8CAA6E,EAA3E,cAAI,EAAE,cAAI,EAAE,sBAAQ,EAAE,sBAAQ,CAA8C;gBACpF,MAAM,CAAC,CACL,UAAU,CAAC,MAAM,GAAG,CAClB,IAAI,CACL,GAAG,CACF;oBACE,oBAAC,yBAAgB,IAAC,KAAK,EAAE,IAAI,EACX,OAAO,EAAE,cAAQ,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EACpD,SAAS,EAAE;4BACT,QAAQ,EAAE,QAAQ,IAAI,IAAI;4BAC1B,KAAK,EAAE,EAAE,OAAO,EAAE,QAAQ,GAAG,IAAI,GAAG,MAAM,EAAC;yBAC5C,EACD,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,QAAQ,EACf,IAAI,EAAE,IAAI,EACV,GAAG,EAAE,IAAI,CAAC,EAAE,EACZ,KAAK,EAAE,KAAI,CAAC,8BAA8B,EAAE,GAAI,CAC9D,CACP,CACF,CAAC;YACJ,CAAC,CAAC,CAEA,CACP,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CA1GA,AA0GC,CA1G6C,KAAK,CAAC,SAAS,GA0G5D","file":"controls/taxonomyPicker/termActions/ButtonTermAction.js","sourcesContent":["import * as React from 'react';\r\nimport { CommandBarButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { ITermAction, TermActionsDisplayStyle, IConcreteTermActionProps } from './ITermsActions';\r\n\r\nexport default class ButtonTermAction extends React.Component<IConcreteTermActionProps> {\r\n\r\n  /**\r\n   * componentWillMount lifecycle hook\r\n   */\r\n  public componentWillMount(): void {\r\n    this.checkForImmediateInvocations();\r\n  }\r\n\r\n  /**\r\n   * Prepares the command bar button\r\n   */\r\n  private prepareCommandBarButton = (termAction: ITermAction): { name: string, text: string, iconName: string, btnTitle: string } => {\r\n    let name: string = \"\";\r\n    let text: string = \"\";\r\n    let iconName: string = \"\";\r\n    let btnTitle: string = \"\";\r\n\r\n    if ((this.props.displayStyle && (this.props.displayStyle === TermActionsDisplayStyle.text || this.props.displayStyle === TermActionsDisplayStyle.textAndIcon))) {\r\n      name = termAction.title;\r\n      text = termAction.title;\r\n    }\r\n    if (this.props.displayStyle && (this.props.displayStyle === TermActionsDisplayStyle.icon || this.props.displayStyle === TermActionsDisplayStyle.textAndIcon)) {\r\n      iconName = termAction.iconName;\r\n    }\r\n\r\n    btnTitle = termAction.title;\r\n\r\n    return { name, text, iconName, btnTitle };\r\n  }\r\n\r\n  /**\r\n   * Gets the action button styling\r\n   */\r\n  private getTermActionActionButtonStyle = (): React.CSSProperties => {\r\n    let result: React.CSSProperties = {\r\n      backgroundColor: \"transparent\",\r\n      width: this.props.displayStyle === TermActionsDisplayStyle.icon ? \"32px\" : null,\r\n      height: \"32px\"\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Check if there are action to immediatly invoke\r\n   */\r\n  private checkForImmediateInvocations() {\r\n    const { termActions } = this.props;\r\n    for (const action of termActions) {\r\n      if (action.invokeActionOnRender) {\r\n        this.onActionExecute(action);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On action execution\r\n   */\r\n  private onActionExecute = async (termAction: ITermAction) => {\r\n    const updateAction = await termAction.actionCallback(this.props.spTermService, this.props.term);\r\n    this.props.termActionCallback(updateAction);\r\n  }\r\n\r\n  /**\r\n   * Default React render method\r\n   */\r\n  public render(): React.ReactElement<IConcreteTermActionProps> {\r\n    const { term, termActions } = this.props;\r\n\r\n    // Check if there are actions to show\r\n    const actionsToShow = termActions.filter(a => !a.hidden);\r\n    if (actionsToShow && actionsToShow.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div style={{ display: 'flex', alignItems: 'stretch', height: '32px' }}>\r\n        {\r\n          termActions &&\r\n          termActions.map(termAction => {\r\n            const { name, text, iconName, btnTitle } = this.prepareCommandBarButton(termAction);\r\n            return (\r\n              termAction.hidden ? (\r\n                null\r\n              ) : (\r\n                <div>\r\n                  <CommandBarButton split={true}\r\n                                    onClick={() => { this.onActionExecute(termAction); }}\r\n                                    iconProps={{\r\n                                      iconName: iconName || null,\r\n                                      style: { display: iconName ? null : \"none\"}\r\n                                    }}\r\n                                    text={text}\r\n                                    title={btnTitle}\r\n                                    name={name}\r\n                                    key={term.Id}\r\n                                    style={this.getTermActionActionButtonStyle()} />\r\n                </div>\r\n              )\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}