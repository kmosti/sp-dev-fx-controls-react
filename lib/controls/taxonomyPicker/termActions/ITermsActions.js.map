{"version":3,"sources":["controls/taxonomyPicker/termActions/ITermsActions.ts"],"names":[],"mappings":";;AA6CA;;GAEG;AACH,IAAY,sBAGX;AAHD,WAAY,sBAAsB;IAChC,yEAAW,CAAA;IACX,2EAAQ,CAAA;AACV,CAAC,EAHW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAGjC;AAED;;GAEG;AACH,IAAY,uBAIX;AAJD,WAAY,uBAAuB;IACjC,qEAAQ,CAAA;IACR,qEAAI,CAAA;IACJ,mFAAW,CAAA;AACb,CAAC,EAJW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAIlC;AAED;;GAEG;AACH,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,iEAAmB,CAAA;IACnB,iEAAe,CAAA;AACjB,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","file":"controls/taxonomyPicker/termActions/ITermsActions.js","sourcesContent":["import { ITerm } from '../../../services/ISPTermStorePickerService';\r\nimport SPTermStorePickerService from '../../../services/SPTermStorePickerService';\r\n\r\nexport interface ITermActionsControlProps {\r\n  /**\r\n   * Current term.\r\n   */\r\n  term: ITerm;\r\n  /**\r\n   * List of actions.\r\n   */\r\n  termActions: ITermActions;\r\n  /**\r\n   * Taxonomy Term Service\r\n   */\r\n  spTermService: SPTermStorePickerService;\r\n  /**\r\n   * Callback after execution term action.\r\n   */\r\n  termActionCallback: (updateAction: UpdateAction) => void;\r\n}\r\n\r\nexport interface ITermActionsControlState {\r\n  /**\r\n   * Specifies the list of the available actions for the term.\r\n   */\r\n  availableActions: ITermAction[];\r\n  /**\r\n   * TermsAction display mode.\r\n   */\r\n  displayMode: TermActionsDisplayMode;\r\n  /**\r\n   * Specifies how the concreate term action is going to be displayed (icon/text/both).\r\n   */\r\n  displayStyle: TermActionsDisplayStyle;\r\n}\r\n\r\nexport interface IConcreteTermActionProps {\r\n  termActions: ITermAction[];\r\n  term: ITerm;\r\n  displayStyle: TermActionsDisplayStyle;\r\n  spTermService: SPTermStorePickerService;\r\n  termActionCallback: (updateAction: UpdateAction) => void;\r\n}\r\n\r\n/**\r\n * Specifies the display mode of the term actions.\r\n */\r\nexport enum TermActionsDisplayMode {\r\n  buttons = 1,\r\n  dropdown\r\n}\r\n\r\n/**\r\n * Specifies the style which is applied to display actions.\r\n */\r\nexport enum TermActionsDisplayStyle {\r\n  text = 1,\r\n  icon,\r\n  textAndIcon\r\n}\r\n\r\n/**\r\n * Specifies the action that should be applied after executing the action callback.\r\n */\r\nexport enum UpdateType {\r\n  updateTermLabel = 1,\r\n  updateTermsTree\r\n}\r\n/**\r\n * Specifies the result that will be returned to the Term after the execution of the callback.\r\n */\r\nexport interface UpdateAction {\r\n  updateActionType: UpdateType;\r\n  value?: string;\r\n}\r\n\r\nexport interface ITermActions {\r\n  actions: ITermAction[];\r\n  termActionsDisplayStyle?: TermActionsDisplayStyle;\r\n  termActionsDisplayMode?: TermActionsDisplayMode;\r\n  /**\r\n   * Initializes the term action with the taxonomy service.\r\n   */\r\n  initialize?: (spTermService: SPTermStorePickerService) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Interface represents the possible action that could be execute on term level.\r\n */\r\nexport interface ITermAction {\r\n  /**\r\n   * Action ID\r\n   */\r\n  id: string;\r\n  /**\r\n   * Action title\r\n   */\r\n  title: string;\r\n  /**\r\n   * Icon class name to be displayed for the action.\r\n   */\r\n  iconName?: string;\r\n  /**\r\n   * Specify if the action is hidden. This could be used for instance when you want to invoke the action right after rendering.\r\n   */\r\n  hidden?: boolean;\r\n  /**\r\n   * Specifies if you want to invoke the action on render\r\n   */\r\n  invokeActionOnRender?: boolean;\r\n\r\n  /**\r\n  * Method checks if the current term is supported.\r\n  * @param currentTerm\r\n  */\r\n  applyToTerm: (currentTerm: ITerm) => Promise<boolean> | boolean;\r\n  /**\r\n   * Method to be executed when action is fired.\r\n   */\r\n  actionCallback: (spTermService: SPTermStorePickerService, currentTerm: ITerm) => Promise<UpdateAction>;\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}