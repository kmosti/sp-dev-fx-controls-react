{"version":3,"sources":["controls/taxonomyPicker/termActions/TermActions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,sBAA0D;AAC1D,gEAAwD;AAExD;;GAEG;AACH;IAME,yBAAmB,KAAa,EAAS,QAAmC;QAAnC,yBAAA,EAAA,2BAAmC;QAA5E,iBAEC;QAFkB,UAAK,GAAL,KAAK,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAA2B;QALrE,OAAE,GAAW,mBAAmB,CAAC;QASjC,gBAAW,GAAG,UAAC,WAAkB;YACtC,IAAM,SAAS,GAAG,4BAAS,CAAC,KAAI,CAAC,eAAe,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,IAAI,WAAW,CAAC,EAAE,EAAzB,CAAyB,CAAC,CAAC;YACrF,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAA;QAEM,mBAAc,GAAG,UAAO,aAAuC,EAAE,WAAkB;;;;;;wBAGlF,YAAY,GAAiB,IAAI,CAAC;wBACtC,KAAA,IAAI,CAAA;wBAAW,qBAAM,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,CAAC,EAAA;;wBAAhE,GAAK,OAAO,GAAG,SAAiD,CAAC;wBAEjE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;4BACb,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BACjD,YAAY,GAAG;gCACb,gBAAgB,EAAE,aAAU,CAAC,eAAe;gCAC5C,KAAK,EAAE,SAAS;6BACjB,CAAC;4BACF,MAAM,gBAAC,YAAY,EAAC;wBACtB,CAAC;wBACD,sBAAO,IAAI,EAAC;;;wBAEZ,OAAO,CAAC,GAAG,CAAC,OAAK,CAAC,CAAC;wBACnB,sBAAO,IAAI,EAAC;;;;aAEf,CAAA;QA9BC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;IA8BH,sBAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,0CAAe","file":"controls/taxonomyPicker/termActions/TermActions.js","sourcesContent":["import { ITerm } from \"../../../services/ISPTermStorePickerService\";\r\nimport SPTermStorePickerService from \"../../../services/SPTermStorePickerService\";\r\n\r\nimport { ITermAction, UpdateAction, UpdateType } from \".\";\r\nimport { findIndex } from \"@microsoft/sp-lodash-subset\";\r\n\r\n/**\r\n * TermAction is responsible to obtain different labels for the term.\r\n */\r\nexport class TermLabelAction implements ITermAction {\r\n  public id: string = \"TermLabelActionId\";\r\n\r\n  private _labels: string[];\r\n  private _processedTerms: ITerm[];\r\n\r\n  constructor(public title: string, public iconName: string = \"LocaleLanguage\") {\r\n    this._processedTerms = [];\r\n  }\r\n\r\n  public applyToTerm = (currentTerm: ITerm): boolean => {\r\n    const termIndex = findIndex(this._processedTerms, term => term.Id == currentTerm.Id);\r\n    if (termIndex >= 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public actionCallback = async (spTermService: SPTermStorePickerService, currentTerm: ITerm): Promise<UpdateAction> => {\r\n    try {\r\n      // Set pointer to loading\r\n      let updateAction: UpdateAction = null;\r\n      this._labels = await spTermService.getTermLabels(currentTerm.Id);\r\n\r\n      if (this._labels) {\r\n        let termLabel: string = this._labels.join(\" ; \");\r\n        updateAction = {\r\n          updateActionType: UpdateType.updateTermLabel,\r\n          value: termLabel\r\n        };\r\n        return updateAction;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}