{"version":3,"sources":["controls/taxonomyPicker/termActions/TermActionsControl.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,iDAAmJ;AACnJ,2DAA0D;AAC1D,uDAAkD;AAElD;IAAgD,sCAAmE;IAEjH,4BAAY,KAA+B;QAA3C,YACE,kBAAM,KAAK,CAAC,SAYb;QAVS,IAAA,qCAAW,CAAgB;QAEnC,IAAM,WAAW,GAAG,WAAW,CAAC,sBAAsB,GAAG,WAAW,CAAC,sBAAsB,GAAG,sCAAsB,CAAC,OAAO,CAAC;QAC7H,IAAM,YAAY,GAAG,WAAW,CAAC,uBAAuB,GAAG,WAAW,CAAC,uBAAuB,GAAG,uCAAuB,CAAC,IAAI,CAAC;QAE9H,KAAI,CAAC,KAAK,GAAG;YACX,gBAAgB,EAAE,EAAE;YACpB,WAAW,aAAA;YACX,YAAY,cAAA;SACb,CAAC;;IACJ,CAAC;IAED;;OAEG;IACI,+CAAkB,GAAzB;QACE,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACW,gDAAmB,GAAjC;;;;;;wBACQ,KAAwB,IAAI,CAAC,KAAK,EAAhC,IAAI,UAAA,EAAE,WAAW,iBAAA,CAAgB;wBAGnC,gBAAgB,GAAkB,EAAE,CAAC;6BAEvC,WAAW,CAAC,OAAO,EAAnB,wBAAmB;8BACmB,EAAnB,KAAA,WAAW,CAAC,OAAO;;;6BAAnB,CAAA,cAAmB,CAAA;wBAA7B,MAAM;wBACG,qBAAM,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,EAAA;;wBAA1C,SAAS,GAAG,SAA8B;wBAChD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACd,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAChC,CAAC;;;wBAJkB,IAAmB,CAAA;;;wBAQ1C,IAAI,CAAC,QAAQ,CAAC;4BACZ,gBAAgB,kBAAA;yBACjB,CAAC,CAAC;;;;;KACJ;IAED;;OAEG;IACI,mCAAM,GAAb;QACU,IAAA,sBAAI,CAAgB;QACtB,IAAA,eAA4D,EAA1D,8BAAY,EAAE,4BAAW,EAAE,sCAAgB,CAAgB;QAEnE,EAAE,CAAC,CAAC,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,CACL,iCAEI,WAAW,IAAI,sCAAsB,CAAC,QAAQ;YAC5C,oBAAC,uCAAkB,IAAC,GAAG,EAAE,cAAY,IAAI,CAAC,EAAI,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,GAAI;;gBAErN,oBAAC,0BAAgB,IAAC,GAAG,EAAE,eAAa,IAAI,CAAC,EAAI,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,GAAI,CAEpN,CACP,CAAC;IACJ,CAAC;IACH,yBAAC;AAAD,CArEA,AAqEC,CArE+C,KAAK,CAAC,SAAS,GAqE9D","file":"controls/taxonomyPicker/termActions/TermActionsControl.js","sourcesContent":["import * as React from 'react';\r\nimport { ITermAction, ITermActionsControlProps, ITermActionsControlState, TermActionsDisplayMode, TermActionsDisplayStyle } from './ITermsActions';\r\nimport { DropdownTermAction } from './DropdownTermAction';\r\nimport ButtonTermAction from './ButtonTermAction';\r\n\r\nexport default class TermActionsControl extends React.Component<ITermActionsControlProps, ITermActionsControlState> {\r\n\r\n  constructor(props: ITermActionsControlProps) {\r\n    super(props);\r\n\r\n    const { termActions } = this.props;\r\n\r\n    const displayMode = termActions.termActionsDisplayMode ? termActions.termActionsDisplayMode : TermActionsDisplayMode.buttons;\r\n    const displayStyle = termActions.termActionsDisplayStyle ? termActions.termActionsDisplayStyle : TermActionsDisplayStyle.text;\r\n\r\n    this.state = {\r\n      availableActions: [],\r\n      displayMode,\r\n      displayStyle\r\n    };\r\n  }\r\n\r\n  /**\r\n   * componentWillMount lifecycle hook\r\n   */\r\n  public componentWillMount(): void {\r\n    this.getAvailableActions();\r\n  }\r\n\r\n  /**\r\n   * Get the available term actions\r\n   */\r\n  private async getAvailableActions(): Promise<void> {\r\n    const { term, termActions } = this.props;\r\n\r\n    // Prepare list of the available actions\r\n    const availableActions: ITermAction[] = [];\r\n\r\n    if (termActions.actions) {\r\n      for (const action of termActions.actions) {\r\n        const available = await action.applyToTerm(term);\r\n        if (available) {\r\n          availableActions.push(action);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      availableActions\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Default React render method\r\n   */\r\n  public render(): React.ReactElement<ITermActionsControlProps> {\r\n    const { term } = this.props;\r\n    const { displayStyle, displayMode, availableActions } = this.state;\r\n\r\n    if (!availableActions || availableActions.length <= 0 || !term) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          displayMode == TermActionsDisplayMode.dropdown ?\r\n            <DropdownTermAction key={`DdAction-${term.Id}`} termActions={availableActions} term={term} displayStyle={displayStyle} termActionCallback={this.props.termActionCallback} spTermService={this.props.spTermService} />\r\n            :\r\n            <ButtonTermAction key={`BtnAction-${term.Id}`} termActions={availableActions} term={term} displayStyle={displayStyle} termActionCallback={this.props.termActionCallback} spTermService={this.props.spTermService} />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}