{"version":3,"sources":["extensions/ootbFields/OotbFieldsFieldCustomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,oCAAsC;AAEtC,8DAAiD;AACjD,oDAAiD;AACjD,kFAG8C;AAG9C,iEAAkF;AAClF,4DAA2D;AAC3D,2CAAsC;AACtC,sEAAqE;AAUrE,IAAM,UAAU,GAAW,2BAA2B,CAAC;AAEvD;IACU,6CAAyD;IADnE;QAAA,qEA+CC;QA5CW,4BAAsB,GAAY,KAAK,CAAC;;IA4CpD,CAAC;IAzCQ,0CAAM,GAAb;QACE,0EAA0E;QAC1E,oFAAoF;QACpF,qBAAG,CAAC,IAAI,CAAC,UAAU,EAAE,sDAAsD,CAAC,CAAC;QAE7E,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;YACjG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACrC,CAAC;QACD,MAAM,CAAC,qBAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGM,gDAAY,GAAnB,UAAoB,KAA0C;QAD9D,iBAoBC;QAlBC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,6BAAa,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC/E,MAAM,CAAC;QACT,CAAC;QACD,IAAM,SAAS,GAAW,mBAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACvF,mBAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;YAC7E,IAAM,UAAU,GACd,KAAK,CAAC,aAAa,CAAC,oBAAU,EAAE;gBAC9B,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,KAAK,CAAC,UAAU;gBACvB,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,KAAI,CAAC,OAAO;gBACrB,wCAAwC;gBACxC,SAAS,EAAE,YAAY;aACxB,CAAC,CAAC;YAEL,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC;IAGM,iDAAa,GAApB,UAAqB,KAA0C;QAC7D,yFAAyF;QACzF,gFAAgF;QAChF,+CAA+C;QAC/C,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAClD,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAxCD;QADC,qBAAQ;2DAUR;IAGD;QADC,qBAAQ;iEAoBR;IAGD;QADC,qBAAQ;kEAOR;IACH,gCAAC;CA/CD,AA+CC,CA9CS,+CAAmB,GA8C5B;kBA/CoB,yBAAyB;AAiD9C,2LAA2L","file":"extensions/ootbFields/OotbFieldsFieldCustomizer.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { Log } from '@microsoft/sp-core-library';\r\nimport { override } from '@microsoft/decorators';\r\nimport {\r\n  BaseFieldCustomizer,\r\n  IFieldCustomizerCellEventParameters\r\n} from '@microsoft/sp-listview-extensibility';\r\n\r\nimport * as strings from 'ControlStrings';\r\nimport OotbFields, { IOotbFieldsProps } from './components/Customizer/OotbFields';\r\nimport { SPHelper } from '../../common/utilities/SPHelper';\r\nimport { Promise } from 'es6-promise';\r\nimport { GeneralHelper } from '../../common/utilities/GeneralHelper';\r\n\r\n/**\r\n * If your field customizer uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface IOotbFieldsFieldCustomizerProperties {\r\n}\r\n\r\nconst LOG_SOURCE: string = 'OotbFieldsFieldCustomizer';\r\n\r\nexport default class OotbFieldsFieldCustomizer\r\n  extends BaseFieldCustomizer<IOotbFieldsFieldCustomizerProperties> {\r\n\r\n    private _shouldRenderUndefiend: boolean = false;\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n    // Add your custom initialization to this method.  The framework will wait\r\n    // for the returned promise to resolve before firing any BaseFieldCustomizer events.\r\n    Log.info(LOG_SOURCE, 'Activated OotbFieldsFieldCustomizer with properties:');\r\n\r\n    if (this.context.field.fieldType === 'Computed' && this.context.field.internalName === 'DocIcon') {\r\n      this._shouldRenderUndefiend = true;\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  @override\r\n  public onRenderCell(event: IFieldCustomizerCellEventParameters): void {\r\n    if (!this._shouldRenderUndefiend && !GeneralHelper.isDefined(event.fieldValue)) {\r\n      return;\r\n    }\r\n    const fieldName: string = SPHelper.getStoredFieldName(this.context.field.internalName);\r\n    SPHelper.getFieldText(event.fieldValue, event.listItem, this.context).then(text => {\r\n      const ootbFields: React.ReactElement<{}> =\r\n        React.createElement(OotbFields, {\r\n          text: text,\r\n          value: event.fieldValue,\r\n          listItem: event.listItem,\r\n          fieldName: fieldName,\r\n          context: this.context,\r\n          //cssProps: { backgroundColor: '#f00' },\r\n          className: 'fake-class'\r\n        });\r\n\r\n      ReactDOM.render(ootbFields, event.domElement);\r\n    });\r\n  }\r\n\r\n  @override\r\n  public onDisposeCell(event: IFieldCustomizerCellEventParameters): void {\r\n    // This method should be used to free any resources that were allocated during rendering.\r\n    // For example, if your onRenderCell() called ReactDOM.render(), then you should\r\n    // call ReactDOM.unmountComponentAtNode() here.\r\n    ReactDOM.unmountComponentAtNode(event.domElement);\r\n    super.onDisposeCell(event);\r\n  }\r\n}\r\n\r\n// test querystring ?loadSPFX=true&debugManifestsFile=https://localhost:4321/temp/manifests.js&fieldCustomizers={\"FieldName\":{\"id\":\"57ebd944-98ed-43f9-b722-e959d6dac6ad\",\"properties\":{}}}\r\n"],"sourceRoot":"..\\..\\..\\src"}