{"version":3,"sources":["services/FilesSearchService.ts"],"names":[],"mappings":"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","file":"services/FilesSearchService.js","sourcesContent":["import { WebPartContext } from \"@microsoft/sp-webpart-base\";\r\nimport { IHttpClientOptions, SPHttpClient, SPHttpClientResponse } from \"@microsoft/sp-http\";\r\nimport { ISearchResult, BingQuerySearchParams, IRecentFile } from \"./FilesSearchService.types\";\r\nimport { find } from \"office-ui-fabric-react/lib/Utilities\";\r\nimport { ApplicationCustomizerContext } from \"@microsoft/sp-application-base\";\r\n\r\n/**\r\n * Maximum file size when searching\r\n */\r\nconst MAXFILESIZE = 52428800;\r\n\r\n/**\r\n * Maximum number of search results\r\n */\r\nconst MAXRESULTS = 100;\r\n\r\nexport class FilesSearchService {\r\n  private context: ApplicationCustomizerContext | WebPartContext;\r\n  private bingAPIKey: string;\r\n\r\n  constructor(context: ApplicationCustomizerContext | WebPartContext, bingAPIKey: string) {\r\n    this.context = context;\r\n    this.bingAPIKey = bingAPIKey;\r\n  }\r\n\r\n  /**\r\n   * Checks if file exists\r\n   */\r\n  public checkFileExists = async (fileUrl: string): Promise<boolean> => {\r\n    try {\r\n      const fetchFileResult = await this.context.httpClient.fetch(fileUrl, SPHttpClient.configurations.v1, {\r\n        headers: new Headers(),\r\n        method: 'HEAD',\r\n        mode: 'cors'\r\n      });\r\n\r\n      if (!fetchFileResult || !fetchFileResult.ok) {\r\n        throw new Error(`Something went wrong when executing search query. Status='${fetchFileResult.status}'`);\r\n      }\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error(`[BingFilesService.fetchFile]: Err='${err.message}'`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes Recent files search.\r\n   */\r\n  public executeRecentSearch = async (accepts?: string[]) => {\r\n    try {\r\n      const webId = this.context.pageContext.web.id.toString();\r\n      const siteId = this.context.pageContext.site.id.toString();\r\n      const fileFilter = this._getFileFilter(accepts);\r\n\r\n      const queryTemplate: string = `((SiteID:${siteId} OR SiteID: {${siteId}}) AND (WebId: ${webId} OR WebId: {${webId}})) AND LastModifiedTime < {Today} AND -Title:OneNote_DeletedPages AND -Title:OneNote_RecycleBin${fileFilter}`;\r\n      const queryData = {\r\n        __metadata: { \"type\": \"Microsoft.Office.Server.Search.REST.SearchRequest\" },\r\n        QueryTemplate: queryTemplate,\r\n        RowLimit: 20,\r\n        SelectProperties: {\r\n          results: [\r\n            \"Title\",\r\n            \"Path\",\r\n            \"Filename\",\r\n            \"FileExtension\",\r\n            \"FileType\",\r\n            \"Created\",\r\n            \"Author\",\r\n            \"LastModifiedTime\",\r\n            \"EditorOwsUser\",\r\n            \"ModifiedBy\",\r\n            \"LinkingUrl\",\r\n            \"SiteTitle\",\r\n            \"ParentLink\",\r\n            \"DocumentPreviewMetadata\",\r\n            \"ListID\",\r\n            \"ListItemID\",\r\n            \"SPSiteURL\",\r\n            \"SiteID\",\r\n            \"WebId\",\r\n            \"UniqueID\",\r\n            \"SPWebUrl\",\r\n            \"DefaultEncodingURL\",\r\n            \"PictureThumbnailURL\",\r\n          ]\r\n        },\r\n        SortList: {\r\n          results: [\r\n            {\r\n              \"Property\": \"LastModifiedTime\",\r\n              \"Direction\": 1\r\n            }\r\n          ]\r\n        }\r\n      };\r\n      const searchApi = `${this.context.pageContext.web.absoluteUrl}/_api/search/postquery`;\r\n\r\n      const recentSearchDataResult = await this.context.spHttpClient.post(searchApi, SPHttpClient.configurations.v1, {\r\n        headers: {\r\n          'accept': 'application/json;odata=nometadata',\r\n          'content-type': 'application/json;odata=verbose',\r\n          \"odata-version\": \"\"\r\n        },\r\n        body: JSON.stringify({\r\n          request: queryData\r\n        })\r\n      });\r\n      if (!recentSearchDataResult || !recentSearchDataResult.ok) {\r\n        throw new Error(`Something went wrong when executing search query. Status='${recentSearchDataResult.status}'`);\r\n      }\r\n\r\n      const recentSearchData = await recentSearchDataResult.json();\r\n      if (!recentSearchData || !recentSearchData.PrimaryQueryResult.RelevantResults.Table.Rows) {\r\n        throw new Error(`Cannot read JSON result`);\r\n      }\r\n\r\n      const recentFilesResult: IRecentFile[] = recentSearchData.PrimaryQueryResult.RelevantResults.Table.Rows.map((row) => { return this.parseRecentSearchResult(row.Cells); });\r\n      return recentFilesResult;\r\n    } catch (err) {\r\n      console.error(`[BingFilesService.executeRecentSearch]: Err='${err.message}'`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes bing search for a file.\r\n   */\r\n  public executeBingSearch = async (queryParams: BingQuerySearchParams): Promise<ISearchResult[]> => {\r\n    try {\r\n      const aspect: string = queryParams.aspect ? queryParams.aspect : 'All';\r\n      const size: string = queryParams.size ? queryParams.size : 'All';\r\n      const license: string = queryParams.license ? queryParams.license : 'Any';\r\n      const query: string = queryParams.query;\r\n\r\n      const maxResults = queryParams.maxResults ? queryParams.maxResults : MAXRESULTS;\r\n      const maxFileSize = queryParams.maxFileSize ? queryParams.maxFileSize : MAXFILESIZE;\r\n\r\n      // No query\r\n      if (query === undefined) {\r\n        return;\r\n      }\r\n\r\n      // Submit the request\r\n      const apiUrl: string = `https://www.bingapis.com/api/v7/images/search?appid=${this.bingAPIKey}&traffictype=Internal_monitor&q=${encodeURIComponent(query)}&count=${maxResults}&aspect=${aspect}&maxFileSize=${maxFileSize}&mkt=en-US&size=${size}&license=${license}`;\r\n\r\n      const searchDataResponse: any = await this.context.httpClient.get(apiUrl, SPHttpClient.configurations.v1, {\r\n        headers: new Headers(),\r\n        method: 'GET',\r\n        mode: 'cors'\r\n      });\r\n\r\n      if (!searchDataResponse || !searchDataResponse.ok) {\r\n        throw new Error(`Something went wrong when executing search query. Status='${searchDataResponse.statusMessage}'`);\r\n      }\r\n      const searchData = await searchDataResponse.json();\r\n      if (!searchData || !searchData.value) {\r\n        throw new Error(`Cannot read JSON result`);\r\n      }\r\n      const bingResults: IBingSearchResult[] = searchData.value;\r\n      const searchResults = bingResults.map(item => this.parseBingSearchResult(item));\r\n\r\n      return searchResults;\r\n    } catch (err) {\r\n      console.error(`[BingFilesService.executeSearch]: Err='${err.message}'`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads document content from SP location.\r\n   */\r\n  public downloadSPFileContent = async (absoluteFileUrl: string, fileName: string): Promise<File> => {\r\n    try {\r\n      const fileDownloadResult = await this.context.spHttpClient.get(absoluteFileUrl, SPHttpClient.configurations.v1);\r\n\r\n      if (!fileDownloadResult || !fileDownloadResult.ok) {\r\n        throw new Error(`Something went wrong when downloading the file. Status='${fileDownloadResult.status}'`);\r\n      }\r\n\r\n      // Return file created from blob\r\n      const blob: Blob = await fileDownloadResult.blob();\r\n      return new File([blob], fileName);\r\n    } catch (err) {\r\n      console.error(`[FileSearchService.fetchFileContent] Err='${err.message}'`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads document content from Remote location.\r\n   */\r\n  public downloadBingContent = async (absoluteFileUrl: string, fileName: string): Promise<File> => {\r\n    try {\r\n      const fileDownloadResult = await this.context.httpClient.get(absoluteFileUrl, SPHttpClient.configurations.v1, {\r\n        method: \"GET\",\r\n        mode: \"cors\"\r\n      });\r\n\r\n      if (!fileDownloadResult || !fileDownloadResult.ok) {\r\n        throw new Error(`Something went wrong when downloading the file. Status='${fileDownloadResult.status}'`);\r\n      }\r\n\r\n      // Return file created from blob\r\n      const blob: Blob = await fileDownloadResult.blob();\r\n      return new File([blob], fileName);\r\n    } catch (err) {\r\n      console.error(`[FileSearchService.fetchFileContent] Err='${err.message}'`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses Recent Search results.\r\n   */\r\n  private parseRecentSearchResult = (cells: Array<any>) => {\r\n    const titleCell = find(cells, x => x.Key == \"Title\");\r\n    const keyCell = find(cells, x => x.Key == \"UniqueID\");\r\n    const fileUrlCell = find(cells, x => x.Key == \"DefaultEncodingURL\");\r\n    const editedByCell = find(cells, x => x.Key == \"ModifiedBy\");\r\n\r\n    const recentFile: IRecentFile = {\r\n      key: keyCell ? keyCell.Value : null,\r\n      name: titleCell ? titleCell.Value : null,\r\n      fileUrl: fileUrlCell ? fileUrlCell.Value : null,\r\n      editedBy: editedByCell ? editedByCell.Value : null\r\n    };\r\n    return recentFile;\r\n  }\r\n\r\n  /**\r\n   * Parses Bing search results.\r\n   */\r\n  private parseBingSearchResult = (bingResult: IBingSearchResult): ISearchResult => {\r\n    // Get dimensions\r\n    const width: number = bingResult!.thumbnail!.width ? bingResult!.thumbnail!.width : bingResult!.width;\r\n    const height: number = bingResult!.thumbnail!.height ? bingResult!.thumbnail!.height : bingResult!.height;\r\n\r\n    // Create a search result\r\n    const searchResult: ISearchResult = {\r\n      thumbnailUrl: bingResult.thumbnailUrl,\r\n      contentUrl: bingResult.contentUrl,\r\n      displayUrl: this.getDisplayUrl(bingResult.hostPageDisplayUrl),\r\n      key: bingResult.imageId,\r\n      width: width,\r\n      height: height,\r\n    };\r\n    return searchResult;\r\n  }\r\n\r\n  /**\r\n   * Builds a file filter using the accepted file extensions\r\n   */\r\n  private _getFileFilter(accepts?: string[]) {\r\n    let fileFilter: string = undefined;\r\n    if (accepts) {\r\n      fileFilter = \" AND (\";\r\n      accepts.forEach((fileType: string, index: number) => {\r\n        fileType = fileType.replace(\".\", \"\");\r\n        if (index > 0) {\r\n          fileFilter = fileFilter + \" OR \";\r\n        }\r\n        fileFilter = fileFilter + `FileExtension:${fileType} OR SecondaryFileExtension:${fileType}`;\r\n      });\r\n      fileFilter = fileFilter + \")\";\r\n    }\r\n    return fileFilter;\r\n  }\r\n\r\n  /**\r\n   * Removes protocol and retrieves only the domain, just like Bing search results does\r\n   * in the SharePoint file picker\r\n   * @param url The display url as provided by Bing\r\n   */\r\n  private getDisplayUrl = (url: string): string => {\r\n    // remove any protocols\r\n    if (url.indexOf('://') > -1) {\r\n      const urlParts: string[] = url.split('://');\r\n      url = urlParts.pop();\r\n    }\r\n\r\n    // Split the URL on the first slash\r\n    const splitUrl = url.split('/');\r\n    return splitUrl[0];\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}