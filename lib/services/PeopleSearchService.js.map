{"version":3,"sources":["services/PeopleSearchService.ts"],"names":[],"mappings":"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","file":"services/PeopleSearchService.js","sourcesContent":["import { ISPHttpClientOptions, SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\r\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\r\nimport { WebPartContext } from '@microsoft/sp-webpart-base';\r\nimport { ExtensionContext } from '@microsoft/sp-extension-base';\r\nimport { MockUsers, PeoplePickerMockClient } from './PeoplePickerMockClient';\r\nimport { PrincipalType, IPeoplePickerUserItem } from \"../PeoplePicker\";\r\nimport { IUsers, IUserInfo } from \"../controls/peoplepicker/IUsers\";\r\nimport { cloneDeep, findIndex } from \"@microsoft/sp-lodash-subset\";\r\n\r\n/**\r\n * Service implementation to search people in SharePoint\r\n */\r\nexport default class SPPeopleSearchService {\r\n  private cachedPersonas: { [property: string]: IUserInfo[] };\r\n  private cachedLocalUsers: { [siteUrl: string]: IUserInfo[] };\r\n\r\n  /**\r\n   * Service constructor\r\n   */\r\n  constructor(private context: WebPartContext | ExtensionContext) {\r\n    this.cachedPersonas = {};\r\n    this.cachedLocalUsers = {};\r\n    this.cachedLocalUsers[this.context.pageContext.web.absoluteUrl] = [];\r\n  }\r\n\r\n  /**\r\n   * Generate the user photo link using SharePoint user photo endpoint.\r\n   *\r\n   * @param value\r\n   */\r\n  public generateUserPhotoLink(value: string): string {\r\n    return `${this.context.pageContext.web.absoluteUrl}/_layouts/15/userphoto.aspx?accountname=${encodeURIComponent(value)}&size=M`;\r\n  }\r\n\r\n  /**\r\n   * Generate sum of principal types\r\n   *\r\n   * PrincipalType controls the type of entities that are returned in the results.\r\n   * Choices are All - 15, Distribution List - 2 , Security Groups - 4, SharePoint Groups - 8, User - 1.\r\n   * These values can be combined (example: 13 is security + SP groups + users)\r\n   *\r\n   * @param principalTypes\r\n   */\r\n  public getSumOfPrincipalTypes(principalTypes: PrincipalType[]) {\r\n    return !!principalTypes && principalTypes.length > 0 ? principalTypes.reduce((a, b) => a + b, 0) : 1;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the specified group\r\n   *\r\n   * @param groupName\r\n   * @param siteUrl\r\n   */\r\n  public async getGroupId(groupName: string, siteUrl: string = null): Promise<number | null> {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      return 1;\r\n    } else {\r\n      const groups = await this.searchTenant(siteUrl, groupName, 1, [PrincipalType.SharePointGroup], false, 0);\r\n      return (groups && groups.length > 0) ? parseInt(groups[0].id) : null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search person by its email or login name\r\n   */\r\n  public async searchPersonByEmailOrLogin(email: string, principalTypes: PrincipalType[], siteUrl: string = null, groupId: number = null, ensureUser: boolean = false): Promise<IPeoplePickerUserItem> {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      // If the running environment is local, load the data from the mock\r\n      const mockUsers = await this.searchPeopleFromMock(email);\r\n      return (mockUsers && mockUsers.length > 0) ? mockUsers[0] : null;\r\n    } else {\r\n      const userResults = await this.searchTenant(siteUrl, email, 1, principalTypes, ensureUser, groupId);\r\n      return (userResults && userResults.length > 0) ? userResults[0] : null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search All Users from the SharePoint People database\r\n   */\r\n  public async searchPeople(query: string, maximumSuggestions: number, principalTypes: PrincipalType[], siteUrl: string = null, groupId: number = null, ensureUser: boolean = false): Promise<IPeoplePickerUserItem[]> {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      // If the running environment is local, load the data from the mock\r\n      return this.searchPeopleFromMock(query);\r\n    } else {\r\n      return await this.searchTenant(siteUrl, query, maximumSuggestions, principalTypes, ensureUser, groupId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Local site search\r\n   */\r\n  private async localSearch(siteUrl: string, query: string, principalTypes: PrincipalType[], showHiddenInUI: boolean, groupName: string, exactMatch: boolean = false): Promise<IPeoplePickerUserItem[]> {\r\n    try {\r\n      let stringVal: string = \"\";\r\n      let cachedPropertyName: string = null;\r\n\r\n      // Check if service needs to search in the site or group\r\n      if (groupName) {\r\n        stringVal = `/_api/web/sitegroups/GetByName('${groupName}')/users`;\r\n        cachedPropertyName = `${siteUrl}-${groupName}`;\r\n      } else {\r\n        stringVal = \"/_api/web/siteusers\";\r\n        cachedPropertyName = siteUrl;\r\n      }\r\n\r\n      if (typeof this.cachedPersonas[cachedPropertyName] === \"undefined\") {\r\n        // filter for principal Type\r\n        let filterVal: string = \"\";\r\n        if (principalTypes) {\r\n          filterVal = `?$filter=(${principalTypes.map(principalType => `PrincipalType eq ${principalType}`).join(\" or \")})`;\r\n        }\r\n\r\n        // filter for showHiddenInUI\r\n        filterVal = filterVal ? `${filterVal} and (IsHiddenInUI eq ${showHiddenInUI})` : `?$filter=IsHiddenInUI eq ${showHiddenInUI}`;\r\n\r\n        // Create the rest API\r\n        const restApi = `${siteUrl}${stringVal}${filterVal}`;\r\n        const data = await this.context.spHttpClient.get(restApi, SPHttpClient.configurations.v1, {\r\n          headers: {\r\n            'Accept': 'application/json;odata.metadata=none'\r\n          }\r\n        });\r\n\r\n        if (data.ok) {\r\n          const userDataResp: IUsers = await data.json();\r\n          if (userDataResp && userDataResp.value && userDataResp.value.length > 0) {\r\n            this.cachedPersonas[cachedPropertyName] = cloneDeep(userDataResp.value);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Check if persons or groups were retrieved and return the ones for the query\r\n      if (this.cachedPersonas[cachedPropertyName]) {\r\n        let persons = this.cachedPersonas[cachedPropertyName];\r\n        if (query) {\r\n          // Check if exact match is required\r\n          if (exactMatch) {\r\n            persons = persons.filter(element => element.Email.toLowerCase() === query.toLowerCase() || element.LoginName.toLowerCase() === query.toLowerCase());\r\n          } else {\r\n            persons = persons.filter(element => element.Title.toLowerCase().indexOf(query.toLowerCase()) !== -1 || element.Email.toLowerCase().indexOf(query.toLowerCase()) !== -1 || element.LoginName.toLowerCase().indexOf(query.toLowerCase()) !== -1);\r\n          }\r\n        }\r\n\r\n        return persons.map(item => ({\r\n          id: item.Id.toString(),\r\n          imageUrl: item.PrincipalType === PrincipalType.User ? this.generateUserPhotoLink(item.Email) : null,\r\n          imageInitials: this.getFullNameInitials(item.Title),\r\n          text: item.Title, // name\r\n          secondaryText: item.Email || item.LoginName, // email\r\n          tertiaryText: \"\", // status\r\n          optionalText: \"\" // anything\r\n        } as IPeoplePickerUserItem));\r\n      }\r\n\r\n      // Nothing to return\r\n      return [];\r\n    } catch (e) {\r\n      console.error(\"PeopleSearchService::localSearch: error occured while fetching the users.\");\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tenant search\r\n   */\r\n  private async searchTenant(siteUrl: string, query: string, maximumSuggestions: number, principalTypes: PrincipalType[], ensureUser: boolean, groupId: number): Promise<IPeoplePickerUserItem[]> {\r\n    try {\r\n      // If the running env is SharePoint, loads from the peoplepicker web service\r\n      const userRequestUrl: string = `${siteUrl || this.context.pageContext.web.absoluteUrl}/_api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.clientPeoplePickerSearchUser`;\r\n      const searchBody = {\r\n        queryParams: {\r\n          AllowEmailAddresses: true,\r\n          AllowMultipleEntities: false,\r\n          AllUrlZones: false,\r\n          MaximumEntitySuggestions: maximumSuggestions,\r\n          PrincipalSource: 15,\r\n          PrincipalType: this.getSumOfPrincipalTypes(principalTypes),\r\n          QueryString: query\r\n        }\r\n      };\r\n\r\n      // Search on the local site when \"0\"\r\n      if (siteUrl) {\r\n        searchBody.queryParams[\"SharePointGroupID\"] = 0;\r\n      }\r\n\r\n      // Check if users need to be searched in a specific group\r\n      if (groupId) {\r\n        searchBody.queryParams[\"SharePointGroupID\"] = groupId;\r\n      }\r\n\r\n      const httpPostOptions: ISPHttpClientOptions = {\r\n        headers: {\r\n          'accept': 'application/json',\r\n          'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(searchBody)\r\n      };\r\n\r\n      // Do the call against the People REST API endpoint\r\n      const data = await this.context.spHttpClient.post(userRequestUrl, SPHttpClient.configurations.v1, httpPostOptions);\r\n      if (data.ok) {\r\n        const userDataResp = await data.json();\r\n        if (userDataResp && userDataResp.value && userDataResp.value.length > 0) {\r\n          let values: any = userDataResp.value;\r\n\r\n          if (typeof userDataResp.value === \"string\") {\r\n            values = JSON.parse(userDataResp.value);\r\n          }\r\n\r\n          // Filter out \"UNVALIDATED_EMAIL_ADDRESS\"\r\n          values = values.filter(v => !(v.EntityData && v.EntityData.PrincipalType && v.EntityData.PrincipalType === \"UNVALIDATED_EMAIL_ADDRESS\"));\r\n\r\n          // Check if local user IDs need to be retrieved\r\n          if (ensureUser) {\r\n            for (const value of values) {\r\n              // Only ensure the user if it is not a SharePoint group\r\n              if (!value.EntityData || (value.EntityData && typeof value.EntityData.SPGroupID === \"undefined\")) {\r\n                const id = await this.ensureUser(value.Key);\r\n                value.LoginName = value.Key;\r\n                value.Key = id;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Filter out NULL keys\r\n          values = values.filter(v => v.Key !== null);\r\n          const userResults = values.map(element => {\r\n            switch (element.EntityType) {\r\n              case 'User':\r\n                let email: string = element.EntityData.Email !== null ? element.EntityData.Email : element.Description;\r\n                return {\r\n                  id: element.Key,\r\n                  loginName: element.LoginName ? element.LoginName : element.Key,\r\n                  imageUrl: this.generateUserPhotoLink(email),\r\n                  imageInitials: this.getFullNameInitials(element.DisplayText),\r\n                  text: element.DisplayText, // name\r\n                  secondaryText: email, // email\r\n                  tertiaryText: \"\", // status\r\n                  optionalText: \"\" // anything\r\n                } as IPeoplePickerUserItem;\r\n              case 'SecGroup':\r\n                return {\r\n                  id: element.Key,\r\n                  loginName: element.LoginName ? element.LoginName : element.Key,\r\n                  imageInitials: this.getFullNameInitials(element.DisplayText),\r\n                  text: element.DisplayText,\r\n                  secondaryText: element.ProviderName\r\n                } as IPeoplePickerUserItem;\r\n              case 'FormsRole':\r\n                return {\r\n                  id: element.Key,\r\n                  loginName: element.LoginName ? element.LoginName : element.Key,\r\n                  imageInitials: this.getFullNameInitials(element.DisplayText),\r\n                  text: element.DisplayText,\r\n                  secondaryText: element.ProviderName\r\n                } as IPeoplePickerUserItem;\r\n              default:\r\n                return {\r\n                  id: element.EntityData.SPGroupID,\r\n                  loginName: element.EntityData.AccountName,\r\n                  imageInitials: this.getFullNameInitials(element.DisplayText),\r\n                  text: element.DisplayText,\r\n                  secondaryText: element.EntityData.AccountName\r\n                } as IPeoplePickerUserItem;\r\n            }\r\n          });\r\n\r\n          return userResults;\r\n        }\r\n      }\r\n\r\n      // Nothing to return\r\n      return [];\r\n    } catch (e) {\r\n      console.error(\"PeopleSearchService::searchTenant: error occured while fetching the users.\");\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the local user ID\r\n   *\r\n   * @param userId\r\n   */\r\n  private async ensureUser(userId: string): Promise<number> {\r\n    const siteUrl = this.context.pageContext.web.absoluteUrl;\r\n    if (this.cachedLocalUsers && this.cachedLocalUsers[siteUrl]) {\r\n      const users = this.cachedLocalUsers[siteUrl];\r\n      const userIdx = findIndex(users, u => u.LoginName === userId);\r\n      if (userIdx !== -1) {\r\n        return users[userIdx].Id;\r\n      }\r\n    }\r\n\r\n    const restApi = `${siteUrl}/_api/web/ensureuser`;\r\n    const data = await this.context.spHttpClient.post(restApi, SPHttpClient.configurations.v1, {\r\n      body: JSON.stringify({ 'logonName': userId })\r\n    });\r\n\r\n    if (data.ok) {\r\n      const user: IUserInfo = await data.json();\r\n      if (user && user.Id) {\r\n        this.cachedLocalUsers[siteUrl].push(user);\r\n        return user.Id;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Generates Initials from a full name\r\n   */\r\n  private getFullNameInitials(fullName: string): string {\r\n    if (fullName === null) {\r\n      return fullName;\r\n    }\r\n\r\n    const words: string[] = fullName.split(' ');\r\n    if (words.length === 0) {\r\n      return '';\r\n    } else if (words.length === 1) {\r\n      return words[0].charAt(0);\r\n    } else {\r\n      return (words[0].charAt(0) + words[1].charAt(0));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the user photo url\r\n   */\r\n  private getUserPhotoUrl(userEmail: string, siteUrl: string): string {\r\n    return `${siteUrl}/_layouts/15/userphoto.aspx?size=S&accountname=${userEmail}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns fake people results for the Mock mode\r\n   */\r\n  private searchPeopleFromMock(query: string): Promise<Array<IPeoplePickerUserItem>> {\r\n    let mockClient: PeoplePickerMockClient = new PeoplePickerMockClient();\r\n    let filterValue = { valToCompare: query };\r\n    return new Promise<Array<IPeoplePickerUserItem>>((resolve) => resolve(MockUsers.filter(mockClient.filterPeople, filterValue)));\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}