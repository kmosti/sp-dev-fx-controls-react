{"version":3,"sources":["services/SPServiceFactory.ts"],"names":[],"mappings":";;AAGA,8DAA0E;AAC1E,iDAA4C;AAC5C,yCAAoC;AAEpC;IAAA;IAOA,CAAC;IANe,8BAAa,GAA3B,UAA4B,OAA0C,EAAE,YAAsB,EAAE,YAAqB;QACnH,EAAE,CAAC,CAAC,6BAAW,CAAC,IAAI,KAAK,iCAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,uBAAa,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QACvD,CAAC;QACD,MAAM,CAAC,IAAI,mBAAS,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IACH,uBAAC;AAAD,CAPA,AAOC,IAAA;AAPY,4CAAgB","file":"services/SPServiceFactory.js","sourcesContent":["import { ExtensionContext } from '@microsoft/sp-extension-base';\r\nimport { IWebPartContext, WebPartContext } from \"@microsoft/sp-webpart-base\";\r\nimport { ISPService } from \"./ISPService\";\r\nimport { Environment, EnvironmentType } from \"@microsoft/sp-core-library\";\r\nimport SPServiceMock from \"./SPServiceMock\";\r\nimport SPService from \"./SPService\";\r\n\r\nexport class SPServiceFactory {\r\n  public static createService(context: WebPartContext | ExtensionContext, includeDelay?: boolean, delayTimeout?: number): ISPService {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      return new SPServiceMock(includeDelay, delayTimeout);\r\n    }\r\n    return new SPService(context);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}